
Lab2_IMU_SERVO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f8  080077f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080077f8  080077f8  000177f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007800  08007800  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007800  08007800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007804  08007804  00017804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  2000000c  08007814  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  08007814  00020830  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d267  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b5f  00000000  00000000  0003d2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce8  00000000  00000000  0003fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000176b  00000000  00000000  00041b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b5c5  00000000  00000000  0004329b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002023b  00000000  00000000  0006e860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001124ac  00000000  00000000  0008ea9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008004  00000000  00000000  001a0f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001a8f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080077c8 	.word	0x080077c8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080077c8 	.word	0x080077c8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800053c:	23ff      	movs	r3, #255	; 0xff
 800053e:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000540:	2300      	movs	r3, #0
 8000542:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8000544:	2300      	movs	r3, #0
 8000546:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000548:	2300      	movs	r3, #0
 800054a:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 800054c:	4a58      	ldr	r2, [pc, #352]	; (80006b0 <bno055_init+0x17c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000552:	4b57      	ldr	r3, [pc, #348]	; (80006b0 <bno055_init+0x17c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	68dc      	ldr	r4, [r3, #12]
 8000558:	4b55      	ldr	r3, [pc, #340]	; (80006b0 <bno055_init+0x17c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	7a58      	ldrb	r0, [r3, #9]
 800055e:	f107 020d 	add.w	r2, r7, #13
 8000562:	2301      	movs	r3, #1
 8000564:	2107      	movs	r1, #7
 8000566:	47a0      	blx	r4
 8000568:	4603      	mov	r3, r0
 800056a:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800056c:	4b50      	ldr	r3, [pc, #320]	; (80006b0 <bno055_init+0x17c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	691c      	ldr	r4, [r3, #16]
 8000572:	4b4f      	ldr	r3, [pc, #316]	; (80006b0 <bno055_init+0x17c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	7a58      	ldrb	r0, [r3, #9]
 8000578:	f107 020e 	add.w	r2, r7, #14
 800057c:	2301      	movs	r3, #1
 800057e:	2100      	movs	r1, #0
 8000580:	47a0      	blx	r4
 8000582:	4603      	mov	r3, r0
 8000584:	b2da      	uxtb	r2, r3
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	4413      	add	r3, r2
 800058a:	b2db      	uxtb	r3, r3
 800058c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 800058e:	4b48      	ldr	r3, [pc, #288]	; (80006b0 <bno055_init+0x17c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	7bba      	ldrb	r2, [r7, #14]
 8000594:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000596:	4b46      	ldr	r3, [pc, #280]	; (80006b0 <bno055_init+0x17c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	691c      	ldr	r4, [r3, #16]
 800059c:	4b44      	ldr	r3, [pc, #272]	; (80006b0 <bno055_init+0x17c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	7a58      	ldrb	r0, [r3, #9]
 80005a2:	f107 020e 	add.w	r2, r7, #14
 80005a6:	2301      	movs	r3, #1
 80005a8:	2101      	movs	r1, #1
 80005aa:	47a0      	blx	r4
 80005ac:	4603      	mov	r3, r0
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	4413      	add	r3, r2
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 80005b8:	4b3d      	ldr	r3, [pc, #244]	; (80006b0 <bno055_init+0x17c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	7bba      	ldrb	r2, [r7, #14]
 80005be:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80005c0:	4b3b      	ldr	r3, [pc, #236]	; (80006b0 <bno055_init+0x17c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	691c      	ldr	r4, [r3, #16]
 80005c6:	4b3a      	ldr	r3, [pc, #232]	; (80006b0 <bno055_init+0x17c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	7a58      	ldrb	r0, [r3, #9]
 80005cc:	f107 020e 	add.w	r2, r7, #14
 80005d0:	2301      	movs	r3, #1
 80005d2:	2102      	movs	r1, #2
 80005d4:	47a0      	blx	r4
 80005d6:	4603      	mov	r3, r0
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	4413      	add	r3, r2
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 80005e2:	4b33      	ldr	r3, [pc, #204]	; (80006b0 <bno055_init+0x17c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	7bba      	ldrb	r2, [r7, #14]
 80005e8:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80005ea:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <bno055_init+0x17c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	691c      	ldr	r4, [r3, #16]
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <bno055_init+0x17c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	7a58      	ldrb	r0, [r3, #9]
 80005f6:	f107 020e 	add.w	r2, r7, #14
 80005fa:	2301      	movs	r3, #1
 80005fc:	2103      	movs	r1, #3
 80005fe:	47a0      	blx	r4
 8000600:	4603      	mov	r3, r0
 8000602:	b2da      	uxtb	r2, r3
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	4413      	add	r3, r2
 8000608:	b2db      	uxtb	r3, r3
 800060a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <bno055_init+0x17c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	7bba      	ldrb	r2, [r7, #14]
 8000612:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <bno055_init+0x17c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	691c      	ldr	r4, [r3, #16]
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <bno055_init+0x17c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	7a58      	ldrb	r0, [r3, #9]
 8000620:	f107 020e 	add.w	r2, r7, #14
 8000624:	2301      	movs	r3, #1
 8000626:	2106      	movs	r1, #6
 8000628:	47a0      	blx	r4
 800062a:	4603      	mov	r3, r0
 800062c:	b2da      	uxtb	r2, r3
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	4413      	add	r3, r2
 8000632:	b2db      	uxtb	r3, r3
 8000634:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <bno055_init+0x17c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	7bba      	ldrb	r2, [r7, #14]
 800063c:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <bno055_init+0x17c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	691c      	ldr	r4, [r3, #16]
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <bno055_init+0x17c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	7a58      	ldrb	r0, [r3, #9]
 800064a:	f107 0208 	add.w	r2, r7, #8
 800064e:	2302      	movs	r3, #2
 8000650:	2104      	movs	r1, #4
 8000652:	47a0      	blx	r4
 8000654:	4603      	mov	r3, r0
 8000656:	b2da      	uxtb	r2, r3
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	4413      	add	r3, r2
 800065c:	b2db      	uxtb	r3, r3
 800065e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000660:	7a3b      	ldrb	r3, [r7, #8]
 8000662:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000664:	7a7b      	ldrb	r3, [r7, #9]
 8000666:	b29b      	uxth	r3, r3
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	b299      	uxth	r1, r3
 800066c:	7a3b      	ldrb	r3, [r7, #8]
 800066e:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <bno055_init+0x17c>)
 8000672:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000674:	430a      	orrs	r2, r1
 8000676:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000678:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <bno055_init+0x17c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	691c      	ldr	r4, [r3, #16]
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <bno055_init+0x17c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	7a58      	ldrb	r0, [r3, #9]
 8000686:	f107 020e 	add.w	r2, r7, #14
 800068a:	2301      	movs	r3, #1
 800068c:	2107      	movs	r1, #7
 800068e:	47a0      	blx	r4
 8000690:	4603      	mov	r3, r0
 8000692:	b2da      	uxtb	r2, r3
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	4413      	add	r3, r2
 8000698:	b2db      	uxtb	r3, r3
 800069a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <bno055_init+0x17c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	7bba      	ldrb	r2, [r7, #14]
 80006a2:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 80006a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd90      	pop	{r4, r7, pc}
 80006b0:	20000028 	.word	0x20000028

080006b4 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
 80006c0:	4613      	mov	r3, r2
 80006c2:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80006c4:	23ff      	movs	r3, #255	; 0xff
 80006c6:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <bno055_write_register+0x48>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 80006d0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80006d4:	e00d      	b.n	80006f2 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <bno055_write_register+0x48>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	68dc      	ldr	r4, [r3, #12]
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <bno055_write_register+0x48>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	7a58      	ldrb	r0, [r3, #9]
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	79f9      	ldrb	r1, [r7, #7]
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	47a0      	blx	r4
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80006ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd90      	pop	{r4, r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000028 	.word	0x20000028

08000700 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800070a:	23ff      	movs	r3, #255	; 0xff
 800070c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800070e:	2300      	movs	r3, #0
 8000710:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <bno055_write_page_id+0x8c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d102      	bne.n	8000720 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 800071a:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800071e:	e030      	b.n	8000782 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <bno055_write_page_id+0x8c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	691c      	ldr	r4, [r3, #16]
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <bno055_write_page_id+0x8c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	7a58      	ldrb	r0, [r3, #9]
 800072c:	f107 020e 	add.w	r2, r7, #14
 8000730:	2301      	movs	r3, #1
 8000732:	2107      	movs	r1, #7
 8000734:	47a0      	blx	r4
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 800073a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d11b      	bne.n	800077a <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <bno055_write_page_id+0x8c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	68dc      	ldr	r4, [r3, #12]
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <bno055_write_page_id+0x8c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	7a58      	ldrb	r0, [r3, #9]
 8000752:	f107 020e 	add.w	r2, r7, #14
 8000756:	2301      	movs	r3, #1
 8000758:	2107      	movs	r1, #7
 800075a:	47a0      	blx	r4
 800075c:	4603      	mov	r3, r0
 800075e:	b2da      	uxtb	r2, r3
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	4413      	add	r3, r2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d106      	bne.n	800077e <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <bno055_write_page_id+0x8c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	79fa      	ldrb	r2, [r7, #7]
 8000776:	711a      	strb	r2, [r3, #4]
 8000778:	e001      	b.n	800077e <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800077a:	23ff      	movs	r3, #255	; 0xff
 800077c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800077e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}
 800078a:	bf00      	nop
 800078c:	20000028 	.word	0x20000028

08000790 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000798:	23ff      	movs	r3, #255	; 0xff
 800079a:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800079c:	2300      	movs	r3, #0
 800079e:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80007a0:	23ff      	movs	r3, #255	; 0xff
 80007a2:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <bno055_get_operation_mode+0x80>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 80007ac:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80007b0:	e02a      	b.n	8000808 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <bno055_get_operation_mode+0x80>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d004      	beq.n	80007c6 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff ff9f 	bl	8000700 <bno055_write_page_id>
 80007c2:	4603      	mov	r3, r0
 80007c4:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80007c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d004      	beq.n	80007d8 <bno055_get_operation_mode+0x48>
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <bno055_get_operation_mode+0x80>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d113      	bne.n	8000800 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <bno055_get_operation_mode+0x80>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	691c      	ldr	r4, [r3, #16]
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <bno055_get_operation_mode+0x80>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	7a58      	ldrb	r0, [r3, #9]
 80007e4:	f107 020d 	add.w	r2, r7, #13
 80007e8:	2301      	movs	r3, #1
 80007ea:	213d      	movs	r1, #61	; 0x3d
 80007ec:	47a0      	blx	r4
 80007ee:	4603      	mov	r3, r0
 80007f0:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 80007f2:	7b7b      	ldrb	r3, [r7, #13]
 80007f4:	f003 030f 	and.w	r3, r3, #15
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	e001      	b.n	8000804 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000800:	23ff      	movs	r3, #255	; 0xff
 8000802:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	20000028 	.word	0x20000028

08000814 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800081e:	23ff      	movs	r3, #255	; 0xff
 8000820:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000822:	2300      	movs	r3, #0
 8000824:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000826:	2300      	movs	r3, #0
 8000828:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 800082a:	23ff      	movs	r3, #255	; 0xff
 800082c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800082e:	4b5c      	ldr	r3, [pc, #368]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d102      	bne.n	800083c <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000836:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800083a:	e0ac      	b.n	8000996 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffa5 	bl	8000790 <bno055_get_operation_mode>
 8000846:	4603      	mov	r3, r0
 8000848:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 800084a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800084e:	2b00      	cmp	r3, #0
 8000850:	f040 809d 	bne.w	800098e <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000854:	7b3b      	ldrb	r3, [r7, #12]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d137      	bne.n	80008ca <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800085a:	4b51      	ldr	r3, [pc, #324]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	691c      	ldr	r4, [r3, #16]
 8000860:	4b4f      	ldr	r3, [pc, #316]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	7a58      	ldrb	r0, [r3, #9]
 8000866:	f107 020d 	add.w	r2, r7, #13
 800086a:	2301      	movs	r3, #1
 800086c:	213d      	movs	r1, #61	; 0x3d
 800086e:	47a0      	blx	r4
 8000870:	4603      	mov	r3, r0
 8000872:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000878:	2b00      	cmp	r3, #0
 800087a:	f040 808a 	bne.w	8000992 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 800087e:	7b7b      	ldrb	r3, [r7, #13]
 8000880:	b25b      	sxtb	r3, r3
 8000882:	f023 030f 	bic.w	r3, r3, #15
 8000886:	b25a      	sxtb	r2, r3
 8000888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088c:	f003 030f 	and.w	r3, r3, #15
 8000890:	b25b      	sxtb	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b25b      	sxtb	r3, r3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800089a:	4b41      	ldr	r3, [pc, #260]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	68dc      	ldr	r4, [r3, #12]
 80008a0:	4b3f      	ldr	r3, [pc, #252]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	7a58      	ldrb	r0, [r3, #9]
 80008a6:	f107 020d 	add.w	r2, r7, #13
 80008aa:	2301      	movs	r3, #1
 80008ac:	213d      	movs	r1, #61	; 0x3d
 80008ae:	47a0      	blx	r4
 80008b0:	4603      	mov	r3, r0
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	4413      	add	r3, r2
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80008bc:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80008c6:	4798      	blx	r3
 80008c8:	e063      	b.n	8000992 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80008ca:	4b35      	ldr	r3, [pc, #212]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	691c      	ldr	r4, [r3, #16]
 80008d0:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	7a58      	ldrb	r0, [r3, #9]
 80008d6:	f107 020d 	add.w	r2, r7, #13
 80008da:	2301      	movs	r3, #1
 80008dc:	213d      	movs	r1, #61	; 0x3d
 80008de:	47a0      	blx	r4
 80008e0:	4603      	mov	r3, r0
 80008e2:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80008e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d116      	bne.n	800091a <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 80008ec:	7b7b      	ldrb	r3, [r7, #13]
 80008ee:	f023 030f 	bic.w	r3, r3, #15
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 80008f6:	f107 030d 	add.w	r3, r7, #13
 80008fa:	2201      	movs	r2, #1
 80008fc:	4619      	mov	r1, r3
 80008fe:	203d      	movs	r0, #61	; 0x3d
 8000900:	f7ff fed8 	bl	80006b4 <bno055_write_register>
 8000904:	4603      	mov	r3, r0
 8000906:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	4413      	add	r3, r2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	2014      	movs	r0, #20
 8000918:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d038      	beq.n	8000992 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	691c      	ldr	r4, [r3, #16]
 8000926:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	7a58      	ldrb	r0, [r3, #9]
 800092c:	f107 020d 	add.w	r2, r7, #13
 8000930:	2301      	movs	r3, #1
 8000932:	213d      	movs	r1, #61	; 0x3d
 8000934:	47a0      	blx	r4
 8000936:	4603      	mov	r3, r0
 8000938:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 800093a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d127      	bne.n	8000992 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000942:	7b7b      	ldrb	r3, [r7, #13]
 8000944:	b25b      	sxtb	r3, r3
 8000946:	f023 030f 	bic.w	r3, r3, #15
 800094a:	b25a      	sxtb	r2, r3
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	f003 030f 	and.w	r3, r3, #15
 8000954:	b25b      	sxtb	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b25b      	sxtb	r3, r3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	68dc      	ldr	r4, [r3, #12]
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	7a58      	ldrb	r0, [r3, #9]
 800096a:	f107 020d 	add.w	r2, r7, #13
 800096e:	2301      	movs	r3, #1
 8000970:	213d      	movs	r1, #61	; 0x3d
 8000972:	47a0      	blx	r4
 8000974:	4603      	mov	r3, r0
 8000976:	b2da      	uxtb	r2, r3
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	4413      	add	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <bno055_set_operation_mode+0x18c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	f44f 7016 	mov.w	r0, #600	; 0x258
 800098a:	4798      	blx	r3
 800098c:	e001      	b.n	8000992 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800098e:	23ff      	movs	r3, #255	; 0xff
 8000990:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000992:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	bd90      	pop	{r4, r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000028 	.word	0x20000028

080009a4 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80009ae:	23ff      	movs	r3, #255	; 0xff
 80009b0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80009b6:	2300      	movs	r3, #0
 80009b8:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80009ba:	23ff      	movs	r3, #255	; 0xff
 80009bc:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80009be:	4b35      	ldr	r3, [pc, #212]	; (8000a94 <bno055_set_power_mode+0xf0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 80009c6:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80009ca:	e05f      	b.n	8000a8c <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fedd 	bl	8000790 <bno055_get_operation_mode>
 80009d6:	4603      	mov	r3, r0
 80009d8:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80009da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d143      	bne.n	8000a6a <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80009e2:	7b3b      	ldrb	r3, [r7, #12]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d008      	beq.n	80009fa <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff ff13 	bl	8000814 <bno055_set_operation_mode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	7bbb      	ldrb	r3, [r7, #14]
 80009f4:	4413      	add	r3, r2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 80009fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d130      	bne.n	8000a64 <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a02:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <bno055_set_power_mode+0xf0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	691c      	ldr	r4, [r3, #16]
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <bno055_set_power_mode+0xf0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	7a58      	ldrb	r0, [r3, #9]
 8000a0e:	f107 020d 	add.w	r2, r7, #13
 8000a12:	2301      	movs	r3, #1
 8000a14:	213e      	movs	r1, #62	; 0x3e
 8000a16:	47a0      	blx	r4
 8000a18:	4603      	mov	r3, r0
 8000a1a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d124      	bne.n	8000a6e <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8000a24:	7b7b      	ldrb	r3, [r7, #13]
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	f023 0303 	bic.w	r3, r3, #3
 8000a2c:	b25a      	sxtb	r2, r3
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <bno055_set_power_mode+0xf0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68dc      	ldr	r4, [r3, #12]
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <bno055_set_power_mode+0xf0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	7a58      	ldrb	r0, [r3, #9]
 8000a4c:	f107 020d 	add.w	r2, r7, #13
 8000a50:	2301      	movs	r3, #1
 8000a52:	213e      	movs	r1, #62	; 0x3e
 8000a54:	47a0      	blx	r4
 8000a56:	4603      	mov	r3, r0
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	e004      	b.n	8000a6e <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8000a64:	23ff      	movs	r3, #255	; 0xff
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	e001      	b.n	8000a6e <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000a6a:	23ff      	movs	r3, #255	; 0xff
 8000a6c:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000a6e:	7b3b      	ldrb	r3, [r7, #12]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d009      	beq.n	8000a88 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8000a74:	7b3b      	ldrb	r3, [r7, #12]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fecc 	bl	8000814 <bno055_set_operation_mode>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	4413      	add	r3, r2
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	20000028 	.word	0x20000028

08000a98 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	617b      	str	r3, [r7, #20]
    
    while (ptr < end)
 8000aac:	e008      	b.n	8000ac0 <cobsEncode+0x28>
    {
        *dst++ = *ptr;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	701a      	strb	r2, [r3, #0]
        ptr++;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3301      	adds	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d3f2      	bcc.n	8000aae <cobsEncode+0x16>
    }
    

}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	371c      	adds	r7, #28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d01c      	beq.n	8000b24 <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	3321      	adds	r3, #33	; 0x21
 8000aee:	461a      	mov	r2, r3
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	68b8      	ldr	r0, [r7, #8]
 8000af4:	f7ff ffd0 	bl	8000a98 <cobsEncode>
        /* Add header 'A' */
        //logger->txbuff[0] = 'A';

        /* Add null terminator */
        //logger->txbuff[size + 1] = '\0'; // or logger->txbuff[size + 1] = 0x00;
		logger->txbuff[size + 1] = 0x00;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3301      	adds	r3, #1
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	3302      	adds	r3, #2
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	f006 f97c 	bl	8006e18 <HAL_UART_Transmit>
 8000b20:	4603      	mov	r3, r0
 8000b22:	e000      	b.n	8000b26 <ertc_dlog_send+0x50>
	}

	return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <bus_read_wrapper>:
/* structure used to read the gyro xyz data output as dps or rps */
struct bno055_gyro_double_t d_gyro_xyz;


int8_t bus_read_wrapper(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t r_len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	603a      	str	r2, [r7, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	71bb      	strb	r3, [r7, #6]
 8000b42:	4613      	mov	r3, r2
 8000b44:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;
  status = HAL_I2C_Mem_Read(&hi2c1, dev_addr << 1, reg_addr, 1, reg_data, r_len, I2C_TIMEOUT);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	b299      	uxth	r1, r3
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	797b      	ldrb	r3, [r7, #5]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	20c8      	movs	r0, #200	; 0xc8
 8000b58:	9002      	str	r0, [sp, #8]
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2301      	movs	r3, #1
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <bus_read_wrapper+0x48>)
 8000b64:	f002 ff98 	bl	8003a98 <HAL_I2C_Mem_Read>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	73fb      	strb	r3, [r7, #15]
  return (int8_t)status;
 8000b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000074 	.word	0x20000074

08000b7c <bus_write_wrapper>:

int8_t bus_write_wrapper(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t wr_len)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af04      	add	r7, sp, #16
 8000b82:	603a      	str	r2, [r7, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	71bb      	strb	r3, [r7, #6]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;
  status = HAL_I2C_Mem_Write(&hi2c1, dev_addr << 1, reg_addr, 1, reg_data, wr_len, I2C_TIMEOUT);
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	b299      	uxth	r1, r3
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	797b      	ldrb	r3, [r7, #5]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	20c8      	movs	r0, #200	; 0xc8
 8000ba4:	9002      	str	r0, [sp, #8]
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2301      	movs	r3, #1
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <bus_write_wrapper+0x48>)
 8000bb0:	f002 fe5e 	bl	8003870 <HAL_I2C_Mem_Write>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	73fb      	strb	r3, [r7, #15]
  return (int8_t)status;
 8000bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000074 	.word	0x20000074

08000bc8 <delay_wrapper>:

void delay_wrapper(u32 delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f002 f809 	bl	8002be8 <HAL_Delay>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <saturate>:

uint32_t saturate(uint32_t val, uint32_t min, uint32_t max){
 8000bde:	b480      	push	{r7}
 8000be0:	b085      	sub	sp, #20
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
	if(val<min)
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d201      	bcs.n	8000bf6 <saturate+0x18>
		return min;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	e006      	b.n	8000c04 <saturate+0x26>
	else if(val>max)
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d901      	bls.n	8000c02 <saturate+0x24>
		return max;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	e000      	b.n	8000c04 <saturate+0x26>
	else
		return val;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c16:	f001 ff8a 	bl	8002b2e <HAL_Init>
  /* USER CODE BEGIN Init */
  // initialise_monitor_handles();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1a:	f000 f8d5 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f000 ffc9 	bl	8001bb4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c22:	f000 ff97 	bl	8001b54 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c26:	f000 f941 	bl	8000eac <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c2a:	f000 f991 	bl	8000f50 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c2e:	f000 f9cf 	bl	8000fd0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000c32:	f000 fa0d 	bl	8001050 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000c36:	f000 fa81 	bl	800113c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c3a:	f000 fb51 	bl	80012e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c3e:	f000 fbe9 	bl	8001414 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c42:	f000 fc3d 	bl	80014c0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000c46:	f000 fc91 	bl	800156c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000c4a:	f000 fd07 	bl	800165c <MX_TIM8_Init>
  MX_UART4_Init();
 8000c4e:	f000 fec1 	bl	80019d4 <MX_UART4_Init>
  MX_UART5_Init();
 8000c52:	f000 feef 	bl	8001a34 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000c56:	f000 ff1d 	bl	8001a94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c5a:	f000 ff4b 	bl	8001af4 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000c5e:	f000 fdcd 	bl	80017fc <MX_TIM9_Init>
  MX_SPI2_Init();
 8000c62:	f000 fa33 	bl	80010cc <MX_SPI2_Init>
  MX_TIM11_Init();
 8000c66:	f000 fe19 	bl	800189c <MX_TIM11_Init>
  MX_TIM13_Init();
 8000c6a:	f000 fe65 	bl	8001938 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  /* Configure data logger  */
  logger.uart_handle = huart3; // for serial
 8000c6e:	4b4a      	ldr	r3, [pc, #296]	; (8000d98 <main+0x188>)
 8000c70:	4a4a      	ldr	r2, [pc, #296]	; (8000d9c <main+0x18c>)
 8000c72:	3344      	adds	r3, #68	; 0x44
 8000c74:	4611      	mov	r1, r2
 8000c76:	2288      	movs	r2, #136	; 0x88
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f006 fd97 	bl	80077ac <memcpy>
  //logger.uart_handle = huart2; // for wifi

  /* Disable LCD SPI SS */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2110      	movs	r1, #16
 8000c82:	4847      	ldr	r0, [pc, #284]	; (8000da0 <main+0x190>)
 8000c84:	f002 fd26 	bl	80036d4 <HAL_GPIO_WritePin>

  bno055.bus_write = bus_write_wrapper;
 8000c88:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <main+0x194>)
 8000c8a:	4a47      	ldr	r2, [pc, #284]	; (8000da8 <main+0x198>)
 8000c8c:	60da      	str	r2, [r3, #12]
  bno055.bus_read = bus_read_wrapper;
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <main+0x194>)
 8000c90:	4a46      	ldr	r2, [pc, #280]	; (8000dac <main+0x19c>)
 8000c92:	611a      	str	r2, [r3, #16]
  bno055.delay_msec = delay_wrapper;
 8000c94:	4b43      	ldr	r3, [pc, #268]	; (8000da4 <main+0x194>)
 8000c96:	4a46      	ldr	r2, [pc, #280]	; (8000db0 <main+0x1a0>)
 8000c98:	615a      	str	r2, [r3, #20]
  bno055.dev_addr = 0x28;
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <main+0x194>)
 8000c9c:	2228      	movs	r2, #40	; 0x28
 8000c9e:	725a      	strb	r2, [r3, #9]
  int32_t comres = bno055_init(&bno055);
 8000ca0:	4840      	ldr	r0, [pc, #256]	; (8000da4 <main+0x194>)
 8000ca2:	f7ff fc47 	bl	8000534 <bno055_init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	607b      	str	r3, [r7, #4]

  comres += bno055_set_power_mode(BNO055_POWER_MODE_NORMAL);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fe7a 	bl	80009a4 <bno055_set_power_mode>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	607b      	str	r3, [r7, #4]
  comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_AMG);
 8000cba:	2007      	movs	r0, #7
 8000cbc:	f7ff fdaa 	bl	8000814 <bno055_set_operation_mode>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	607b      	str	r3, [r7, #4]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000cca:	2104      	movs	r1, #4
 8000ccc:	4839      	ldr	r0, [pc, #228]	; (8000db4 <main+0x1a4>)
 8000cce:	f004 fde5 	bl	800589c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000cd2:	2108      	movs	r1, #8
 8000cd4:	4837      	ldr	r0, [pc, #220]	; (8000db4 <main+0x1a4>)
 8000cd6:	f004 fde1 	bl	800589c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(20);
 8000cda:	2014      	movs	r0, #20
 8000cdc:	f001 ff84 	bl	8002be8 <HAL_Delay>
	  //bno055_convert_double_accel_xyz_msq(&d_accel_xyz);
	  //bno055_convert_double_gyro_xyz_rps(&d_gyro_xyz);

	  //logger_data.header = 'A';
	  logger_data.w1 = 10;
 8000ce0:	4b35      	ldr	r3, [pc, #212]	; (8000db8 <main+0x1a8>)
 8000ce2:	4a36      	ldr	r2, [pc, #216]	; (8000dbc <main+0x1ac>)
 8000ce4:	601a      	str	r2, [r3, #0]
	  logger_data.w2 += 1.085;
 8000ce6:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <main+0x1a8>)
 8000ce8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cf0:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000d80 <main+0x170>
 8000cf4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cf8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <main+0x1a8>)
 8000cfe:	edc3 7a01 	vstr	s15, [r3, #4]
	  logger_data.u1 = 10;
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <main+0x1a8>)
 8000d04:	4a2d      	ldr	r2, [pc, #180]	; (8000dbc <main+0x1ac>)
 8000d06:	609a      	str	r2, [r3, #8]
	  logger_data.y2 = d_gyro_xyz.y;
	  logger_data.z2 = d_gyro_xyz.z;
	  //degrees = radians * ( 180.0 / PI )
	  //double angle = asin(d_accel_xyz.y/9.81) * (180.0 / 3.14159265);
*/
	  ertc_dlog_send(&logger, &logger_data, sizeof(logger_data));
 8000d08:	220c      	movs	r2, #12
 8000d0a:	492b      	ldr	r1, [pc, #172]	; (8000db8 <main+0x1a8>)
 8000d0c:	4822      	ldr	r0, [pc, #136]	; (8000d98 <main+0x188>)
 8000d0e:	f7ff fee2 	bl	8000ad6 <ertc_dlog_send>
	  //ertc_dlog_update(&logger);

	  //pan = logger_data.u1;

	  /* update pan-tilt camera */
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <main+0x1b0>)
 8000d14:	f993 3000 	ldrsb.w	r3, [r3]
 8000d18:	ee07 3a90 	vmov	s15, r3
 8000d1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d20:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8000d88 <main+0x178>
 8000d24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d28:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8000d90 <main+0x180>
 8000d2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <main+0x1a4>)
 8000d36:	681c      	ldr	r4, [r3, #0]
 8000d38:	22c8      	movs	r2, #200	; 0xc8
 8000d3a:	2164      	movs	r1, #100	; 0x64
 8000d3c:	ee17 0a90 	vmov	r0, s15
 8000d40:	f7ff ff4d 	bl	8000bde <saturate>
 8000d44:	4603      	mov	r3, r0
 8000d46:	63e3      	str	r3, [r4, #60]	; 0x3c
					(uint32_t)saturate((150+pan*(50.0/45.0)), SERVO_MIN_VALUE, SERVO_MAX_VALUE)); // tilt
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <main+0x1b4>)
 8000d4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d4e:	ee07 3a90 	vmov	s15, r3
 8000d52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d56:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000d88 <main+0x178>
 8000d5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d5e:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000d90 <main+0x180>
 8000d62:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <main+0x1a4>)
 8000d6c:	681c      	ldr	r4, [r3, #0]
 8000d6e:	22c8      	movs	r2, #200	; 0xc8
 8000d70:	2164      	movs	r1, #100	; 0x64
 8000d72:	ee17 0a90 	vmov	r0, s15
 8000d76:	f7ff ff32 	bl	8000bde <saturate>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	63a3      	str	r3, [r4, #56]	; 0x38
	  HAL_Delay(20);
 8000d7e:	e7ac      	b.n	8000cda <main+0xca>
 8000d80:	f5c28f5c 	.word	0xf5c28f5c
 8000d84:	3ff15c28 	.word	0x3ff15c28
 8000d88:	71c71c72 	.word	0x71c71c72
 8000d8c:	3ff1c71c 	.word	0x3ff1c71c
 8000d90:	00000000 	.word	0x00000000
 8000d94:	4062c000 	.word	0x4062c000
 8000d98:	20000750 	.word	0x20000750
 8000d9c:	200006b0 	.word	0x200006b0
 8000da0:	40021000 	.word	0x40021000
 8000da4:	20000738 	.word	0x20000738
 8000da8:	08000b7d 	.word	0x08000b7d
 8000dac:	08000b31 	.word	0x08000b31
 8000db0:	08000bc9 	.word	0x08000bc9
 8000db4:	200001e4 	.word	0x200001e4
 8000db8:	2000081c 	.word	0x2000081c
 8000dbc:	41200000 	.word	0x41200000
 8000dc0:	20000828 	.word	0x20000828
 8000dc4:	20000829 	.word	0x20000829

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b094      	sub	sp, #80	; 0x50
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	2234      	movs	r2, #52	; 0x34
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f006 fcbb 	bl	8007752 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dec:	f003 faa0 	bl	8004330 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <SystemClock_Config+0xdc>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	4a2b      	ldr	r2, [pc, #172]	; (8000ea4 <SystemClock_Config+0xdc>)
 8000df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfc:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <SystemClock_Config+0xdc>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <SystemClock_Config+0xe0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e10:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <SystemClock_Config+0xe0>)
 8000e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <SystemClock_Config+0xe0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e28:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e2c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000e3c:	2360      	movs	r3, #96	; 0x60
 8000e3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e44:	2304      	movs	r3, #4
 8000e46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 facd 	bl	80043f0 <HAL_RCC_OscConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e5c:	f000 fff2 	bl	8001e44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e60:	f003 fa76 	bl	8004350 <HAL_PWREx_EnableOverDrive>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e6a:	f000 ffeb 	bl	8001e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6e:	230f      	movs	r3, #15
 8000e70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e72:	2302      	movs	r3, #2
 8000e74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	2103      	movs	r1, #3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fd5e 	bl	800494c <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e96:	f000 ffd5 	bl	8001e44 <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3750      	adds	r7, #80	; 0x50
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ec0:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <MX_ADC1_Init+0x9c>)
 8000ec2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ec6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000eee:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <MX_ADC1_Init+0xa0>)
 8000ef0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000f0e:	f001 fe8f 	bl	8002c30 <HAL_ADC_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f18:	f000 ff94 	bl	8001e44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000f2e:	f001 fec3 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f38:	f000 ff84 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000002c 	.word	0x2000002c
 8000f48:	40012000 	.word	0x40012000
 8000f4c:	0f000001 	.word	0x0f000001

08000f50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_I2C1_Init+0x74>)
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <MX_I2C1_Init+0x78>)
 8000f58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_I2C1_Init+0x74>)
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <MX_I2C1_Init+0x7c>)
 8000f5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_I2C1_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_I2C1_Init+0x74>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_I2C1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_I2C1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_I2C1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f8a:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <MX_I2C1_Init+0x74>)
 8000f8c:	f002 fbe0 	bl	8003750 <HAL_I2C_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f96:	f000 ff55 	bl	8001e44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <MX_I2C1_Init+0x74>)
 8000f9e:	f003 f92f 	bl	8004200 <HAL_I2CEx_ConfigAnalogFilter>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fa8:	f000 ff4c 	bl	8001e44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_I2C1_Init+0x74>)
 8000fb0:	f003 f971 	bl	8004296 <HAL_I2CEx_ConfigDigitalFilter>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fba:	f000 ff43 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000074 	.word	0x20000074
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	20303e5d 	.word	0x20303e5d

08000fd0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <MX_I2C2_Init+0x74>)
 8000fd6:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <MX_I2C2_Init+0x78>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000fda:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_I2C2_Init+0x74>)
 8000fdc:	4a1b      	ldr	r2, [pc, #108]	; (800104c <MX_I2C2_Init+0x7c>)
 8000fde:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <MX_I2C2_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <MX_I2C2_Init+0x74>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <MX_I2C2_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_I2C2_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <MX_I2C2_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_I2C2_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_I2C2_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800100a:	480e      	ldr	r0, [pc, #56]	; (8001044 <MX_I2C2_Init+0x74>)
 800100c:	f002 fba0 	bl	8003750 <HAL_I2C_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001016:	f000 ff15 	bl	8001e44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800101a:	2100      	movs	r1, #0
 800101c:	4809      	ldr	r0, [pc, #36]	; (8001044 <MX_I2C2_Init+0x74>)
 800101e:	f003 f8ef 	bl	8004200 <HAL_I2CEx_ConfigAnalogFilter>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001028:	f000 ff0c 	bl	8001e44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800102c:	2100      	movs	r1, #0
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_I2C2_Init+0x74>)
 8001030:	f003 f931 	bl	8004296 <HAL_I2CEx_ConfigDigitalFilter>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800103a:	f000 ff03 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000c8 	.word	0x200000c8
 8001048:	40005800 	.word	0x40005800
 800104c:	20303e5d 	.word	0x20303e5d

08001050 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_SPI1_Init+0x74>)
 8001056:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <MX_SPI1_Init+0x78>)
 8001058:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_SPI1_Init+0x74>)
 800105c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001060:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_SPI1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_SPI1_Init+0x74>)
 800106a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800106e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_SPI1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_SPI1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_SPI1_Init+0x74>)
 800107e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001082:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_SPI1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_SPI1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_SPI1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_SPI1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_SPI1_Init+0x74>)
 800109e:	2207      	movs	r2, #7
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_SPI1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_SPI1_Init+0x74>)
 80010aa:	2208      	movs	r2, #8
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_SPI1_Init+0x74>)
 80010b0:	f004 fa9a 	bl	80055e8 <HAL_SPI_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010ba:	f000 fec3 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000011c 	.word	0x2000011c
 80010c8:	40013000 	.word	0x40013000

080010cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_SPI2_Init+0x68>)
 80010d2:	4a19      	ldr	r2, [pc, #100]	; (8001138 <MX_SPI2_Init+0x6c>)
 80010d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_SPI2_Init+0x68>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_SPI2_Init+0x68>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_SPI2_Init+0x68>)
 80010e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_SPI2_Init+0x68>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_SPI2_Init+0x68>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_SPI2_Init+0x68>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_SPI2_Init+0x68>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_SPI2_Init+0x68>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_SPI2_Init+0x68>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_SPI2_Init+0x68>)
 8001110:	2207      	movs	r2, #7
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_SPI2_Init+0x68>)
 8001116:	2200      	movs	r2, #0
 8001118:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_SPI2_Init+0x68>)
 800111c:	2200      	movs	r2, #0
 800111e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_SPI2_Init+0x68>)
 8001122:	f004 fa61 	bl	80055e8 <HAL_SPI_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 800112c:	f000 fe8a 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000180 	.word	0x20000180
 8001138:	40003800 	.word	0x40003800

0800113c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b09a      	sub	sp, #104	; 0x68
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	222c      	movs	r2, #44	; 0x2c
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f006 faeb 	bl	8007752 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800117c:	4b56      	ldr	r3, [pc, #344]	; (80012d8 <MX_TIM1_Init+0x19c>)
 800117e:	4a57      	ldr	r2, [pc, #348]	; (80012dc <MX_TIM1_Init+0x1a0>)
 8001180:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 959;
 8001182:	4b55      	ldr	r3, [pc, #340]	; (80012d8 <MX_TIM1_Init+0x19c>)
 8001184:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001188:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <MX_TIM1_Init+0x19c>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001190:	4b51      	ldr	r3, [pc, #324]	; (80012d8 <MX_TIM1_Init+0x19c>)
 8001192:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001196:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b4f      	ldr	r3, [pc, #316]	; (80012d8 <MX_TIM1_Init+0x19c>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800119e:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <MX_TIM1_Init+0x19c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a4:	4b4c      	ldr	r3, [pc, #304]	; (80012d8 <MX_TIM1_Init+0x19c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011aa:	484b      	ldr	r0, [pc, #300]	; (80012d8 <MX_TIM1_Init+0x19c>)
 80011ac:	f004 fac7 	bl	800573e <HAL_TIM_Base_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80011b6:	f000 fe45 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011be:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011c4:	4619      	mov	r1, r3
 80011c6:	4844      	ldr	r0, [pc, #272]	; (80012d8 <MX_TIM1_Init+0x19c>)
 80011c8:	f004 ff1a 	bl	8006000 <HAL_TIM_ConfigClockSource>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80011d2:	f000 fe37 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011d6:	4840      	ldr	r0, [pc, #256]	; (80012d8 <MX_TIM1_Init+0x19c>)
 80011d8:	f004 fb08 	bl	80057ec <HAL_TIM_PWM_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80011e2:	f000 fe2f 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011f6:	4619      	mov	r1, r3
 80011f8:	4837      	ldr	r0, [pc, #220]	; (80012d8 <MX_TIM1_Init+0x19c>)
 80011fa:	f005 fcb3 	bl	8006b64 <HAL_TIMEx_MasterConfigSynchronization>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001204:	f000 fe1e 	bl	8001e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001208:	2360      	movs	r3, #96	; 0x60
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001210:	2300      	movs	r3, #0
 8001212:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001214:	2300      	movs	r3, #0
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001224:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001228:	2200      	movs	r2, #0
 800122a:	4619      	mov	r1, r3
 800122c:	482a      	ldr	r0, [pc, #168]	; (80012d8 <MX_TIM1_Init+0x19c>)
 800122e:	f004 fdd3 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001238:	f000 fe04 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800123c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001240:	2204      	movs	r2, #4
 8001242:	4619      	mov	r1, r3
 8001244:	4824      	ldr	r0, [pc, #144]	; (80012d8 <MX_TIM1_Init+0x19c>)
 8001246:	f004 fdc7 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001250:	f000 fdf8 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001254:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001258:	2208      	movs	r2, #8
 800125a:	4619      	mov	r1, r3
 800125c:	481e      	ldr	r0, [pc, #120]	; (80012d8 <MX_TIM1_Init+0x19c>)
 800125e:	f004 fdbb 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001268:	f000 fdec 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800126c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001270:	220c      	movs	r2, #12
 8001272:	4619      	mov	r1, r3
 8001274:	4818      	ldr	r0, [pc, #96]	; (80012d8 <MX_TIM1_Init+0x19c>)
 8001276:	f004 fdaf 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001280:	f000 fde0 	bl	8001e44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4807      	ldr	r0, [pc, #28]	; (80012d8 <MX_TIM1_Init+0x19c>)
 80012ba:	f005 fce1 	bl	8006c80 <HAL_TIMEx_ConfigBreakDeadTime>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 80012c4:	f000 fdbe 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <MX_TIM1_Init+0x19c>)
 80012ca:	f001 f8f7 	bl	80024bc <HAL_TIM_MspPostInit>

}
 80012ce:	bf00      	nop
 80012d0:	3768      	adds	r7, #104	; 0x68
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200001e4 	.word	0x200001e4
 80012dc:	40010000 	.word	0x40010000

080012e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b092      	sub	sp, #72	; 0x48
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
 8001310:	615a      	str	r2, [r3, #20]
 8001312:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001320:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <MX_TIM2_Init+0x130>)
 8001322:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001326:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <MX_TIM2_Init+0x130>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <MX_TIM2_Init+0x130>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <MX_TIM2_Init+0x130>)
 8001336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800133a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b34      	ldr	r3, [pc, #208]	; (8001410 <MX_TIM2_Init+0x130>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <MX_TIM2_Init+0x130>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001348:	4831      	ldr	r0, [pc, #196]	; (8001410 <MX_TIM2_Init+0x130>)
 800134a:	f004 f9f8 	bl	800573e <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001354:	f000 fd76 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800135e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001362:	4619      	mov	r1, r3
 8001364:	482a      	ldr	r0, [pc, #168]	; (8001410 <MX_TIM2_Init+0x130>)
 8001366:	f004 fe4b 	bl	8006000 <HAL_TIM_ConfigClockSource>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001370:	f000 fd68 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001374:	4826      	ldr	r0, [pc, #152]	; (8001410 <MX_TIM2_Init+0x130>)
 8001376:	f004 fa39 	bl	80057ec <HAL_TIM_PWM_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001380:	f000 fd60 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001384:	4822      	ldr	r0, [pc, #136]	; (8001410 <MX_TIM2_Init+0x130>)
 8001386:	f004 fb83 	bl	8005a90 <HAL_TIM_IC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001390:	f000 fd58 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a0:	4619      	mov	r1, r3
 80013a2:	481b      	ldr	r0, [pc, #108]	; (8001410 <MX_TIM2_Init+0x130>)
 80013a4:	f005 fbde 	bl	8006b64 <HAL_TIMEx_MasterConfigSynchronization>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80013ae:	f000 fd49 	bl	8001e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b2:	2360      	movs	r3, #96	; 0x60
 80013b4:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	2200      	movs	r2, #0
 80013c8:	4619      	mov	r1, r3
 80013ca:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_TIM2_Init+0x130>)
 80013cc:	f004 fd04 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80013d6:	f000 fd35 	bl	8001e44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013de:	2301      	movs	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80013ea:	463b      	mov	r3, r7
 80013ec:	2208      	movs	r2, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_TIM2_Init+0x130>)
 80013f2:	f004 fc55 	bl	8005ca0 <HAL_TIM_IC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 80013fc:	f000 fd22 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_TIM2_Init+0x130>)
 8001402:	f001 f85b 	bl	80024bc <HAL_TIM_MspPostInit>

}
 8001406:	bf00      	nop
 8001408:	3748      	adds	r7, #72	; 0x48
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000230 	.word	0x20000230

08001414 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2224      	movs	r2, #36	; 0x24
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f006 f995 	bl	8007752 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001432:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <MX_TIM3_Init+0xa4>)
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <MX_TIM3_Init+0xa8>)
 8001436:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_TIM3_Init+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_TIM3_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_TIM3_Init+0xa4>)
 8001446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_TIM3_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_TIM3_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001458:	2301      	movs	r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001460:	2301      	movs	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001470:	2301      	movs	r3, #1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	480d      	ldr	r0, [pc, #52]	; (80014b8 <MX_TIM3_Init+0xa4>)
 8001484:	f004 fb66 	bl	8005b54 <HAL_TIM_Encoder_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800148e:	f000 fcd9 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_TIM3_Init+0xa4>)
 80014a0:	f005 fb60 	bl	8006b64 <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80014aa:	f000 fccb 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3730      	adds	r7, #48	; 0x30
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000027c 	.word	0x2000027c
 80014bc:	40000400 	.word	0x40000400

080014c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2224      	movs	r2, #36	; 0x24
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f006 f93f 	bl	8007752 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_TIM4_Init+0xa4>)
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <MX_TIM4_Init+0xa8>)
 80014e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_TIM4_Init+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <MX_TIM4_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_TIM4_Init+0xa4>)
 80014f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_TIM4_Init+0xa4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_TIM4_Init+0xa4>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001504:	2301      	movs	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800150c:	2301      	movs	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800151c:	2301      	movs	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4619      	mov	r1, r3
 800152e:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_TIM4_Init+0xa4>)
 8001530:	f004 fb10 	bl	8005b54 <HAL_TIM_Encoder_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800153a:	f000 fc83 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001546:	463b      	mov	r3, r7
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_TIM4_Init+0xa4>)
 800154c:	f005 fb0a 	bl	8006b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001556:	f000 fc75 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	3730      	adds	r7, #48	; 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200002c8 	.word	0x200002c8
 8001568:	40000800 	.word	0x40000800

0800156c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08e      	sub	sp, #56	; 0x38
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158c:	463b      	mov	r3, r7
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]
 800159a:	615a      	str	r2, [r3, #20]
 800159c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <MX_TIM5_Init+0xe8>)
 80015a0:	4a2d      	ldr	r2, [pc, #180]	; (8001658 <MX_TIM5_Init+0xec>)
 80015a2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <MX_TIM5_Init+0xe8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <MX_TIM5_Init+0xe8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <MX_TIM5_Init+0xe8>)
 80015b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_TIM5_Init+0xe8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <MX_TIM5_Init+0xe8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015c4:	4823      	ldr	r0, [pc, #140]	; (8001654 <MX_TIM5_Init+0xe8>)
 80015c6:	f004 f8ba 	bl	800573e <HAL_TIM_Base_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80015d0:	f000 fc38 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015de:	4619      	mov	r1, r3
 80015e0:	481c      	ldr	r0, [pc, #112]	; (8001654 <MX_TIM5_Init+0xe8>)
 80015e2:	f004 fd0d 	bl	8006000 <HAL_TIM_ConfigClockSource>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80015ec:	f000 fc2a 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80015f0:	4818      	ldr	r0, [pc, #96]	; (8001654 <MX_TIM5_Init+0xe8>)
 80015f2:	f004 f8fb 	bl	80057ec <HAL_TIM_PWM_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80015fc:	f000 fc22 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	4619      	mov	r1, r3
 800160e:	4811      	ldr	r0, [pc, #68]	; (8001654 <MX_TIM5_Init+0xe8>)
 8001610:	f005 faa8 	bl	8006b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800161a:	f000 fc13 	bl	8001e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800161e:	2360      	movs	r3, #96	; 0x60
 8001620:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800162e:	463b      	mov	r3, r7
 8001630:	2200      	movs	r2, #0
 8001632:	4619      	mov	r1, r3
 8001634:	4807      	ldr	r0, [pc, #28]	; (8001654 <MX_TIM5_Init+0xe8>)
 8001636:	f004 fbcf 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001640:	f000 fc00 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <MX_TIM5_Init+0xe8>)
 8001646:	f000 ff39 	bl	80024bc <HAL_TIM_MspPostInit>

}
 800164a:	bf00      	nop
 800164c:	3738      	adds	r7, #56	; 0x38
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000314 	.word	0x20000314
 8001658:	40000c00 	.word	0x40000c00

0800165c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b09a      	sub	sp, #104	; 0x68
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	222c      	movs	r2, #44	; 0x2c
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f006 f85b 	bl	8007752 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800169c:	4b55      	ldr	r3, [pc, #340]	; (80017f4 <MX_TIM8_Init+0x198>)
 800169e:	4a56      	ldr	r2, [pc, #344]	; (80017f8 <MX_TIM8_Init+0x19c>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016a2:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80016ae:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016bc:	4b4d      	ldr	r3, [pc, #308]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016c8:	484a      	ldr	r0, [pc, #296]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016ca:	f004 f838 	bl	800573e <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80016d4:	f000 fbb6 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016dc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016e2:	4619      	mov	r1, r3
 80016e4:	4843      	ldr	r0, [pc, #268]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016e6:	f004 fc8b 	bl	8006000 <HAL_TIM_ConfigClockSource>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80016f0:	f000 fba8 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016f4:	483f      	ldr	r0, [pc, #252]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016f6:	f004 f879 	bl	80057ec <HAL_TIM_PWM_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001700:	f000 fba0 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001710:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001714:	4619      	mov	r1, r3
 8001716:	4837      	ldr	r0, [pc, #220]	; (80017f4 <MX_TIM8_Init+0x198>)
 8001718:	f005 fa24 	bl	8006b64 <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001722:	f000 fb8f 	bl	8001e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001726:	2360      	movs	r3, #96	; 0x60
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172e:	2300      	movs	r3, #0
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001732:	2300      	movs	r3, #0
 8001734:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001742:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	482a      	ldr	r0, [pc, #168]	; (80017f4 <MX_TIM8_Init+0x198>)
 800174c:	f004 fb44 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001756:	f000 fb75 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800175a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800175e:	2204      	movs	r2, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4824      	ldr	r0, [pc, #144]	; (80017f4 <MX_TIM8_Init+0x198>)
 8001764:	f004 fb38 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800176e:	f000 fb69 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001776:	2208      	movs	r2, #8
 8001778:	4619      	mov	r1, r3
 800177a:	481e      	ldr	r0, [pc, #120]	; (80017f4 <MX_TIM8_Init+0x198>)
 800177c:	f004 fb2c 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8001786:	f000 fb5d 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800178a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800178e:	220c      	movs	r2, #12
 8001790:	4619      	mov	r1, r3
 8001792:	4818      	ldr	r0, [pc, #96]	; (80017f4 <MX_TIM8_Init+0x198>)
 8001794:	f004 fb20 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 800179e:	f000 fb51 	bl	8001e44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <MX_TIM8_Init+0x198>)
 80017d8:	f005 fa52 	bl	8006c80 <HAL_TIMEx_ConfigBreakDeadTime>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 80017e2:	f000 fb2f 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017e6:	4803      	ldr	r0, [pc, #12]	; (80017f4 <MX_TIM8_Init+0x198>)
 80017e8:	f000 fe68 	bl	80024bc <HAL_TIM_MspPostInit>

}
 80017ec:	bf00      	nop
 80017ee:	3768      	adds	r7, #104	; 0x68
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000360 	.word	0x20000360
 80017f8:	40010400 	.word	0x40010400

080017fc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	615a      	str	r2, [r3, #20]
 8001812:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_TIM9_Init+0x98>)
 8001816:	4a20      	ldr	r2, [pc, #128]	; (8001898 <MX_TIM9_Init+0x9c>)
 8001818:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_TIM9_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_TIM9_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <MX_TIM9_Init+0x98>)
 8001828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_TIM9_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_TIM9_Init+0x98>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800183a:	4816      	ldr	r0, [pc, #88]	; (8001894 <MX_TIM9_Init+0x98>)
 800183c:	f003 ffd6 	bl	80057ec <HAL_TIM_PWM_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001846:	f000 fafd 	bl	8001e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184a:	2360      	movs	r3, #96	; 0x60
 800184c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	4619      	mov	r1, r3
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <MX_TIM9_Init+0x98>)
 8001862:	f004 fab9 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 800186c:	f000 faea 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	2204      	movs	r2, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4807      	ldr	r0, [pc, #28]	; (8001894 <MX_TIM9_Init+0x98>)
 8001878:	f004 faae 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001882:	f000 fadf 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001886:	4803      	ldr	r0, [pc, #12]	; (8001894 <MX_TIM9_Init+0x98>)
 8001888:	f000 fe18 	bl	80024bc <HAL_TIM_MspPostInit>

}
 800188c:	bf00      	nop
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200003ac 	.word	0x200003ac
 8001898:	40014000 	.word	0x40014000

0800189c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	615a      	str	r2, [r3, #20]
 80018b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <MX_TIM11_Init+0x94>)
 80018b6:	4a1f      	ldr	r2, [pc, #124]	; (8001934 <MX_TIM11_Init+0x98>)
 80018b8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <MX_TIM11_Init+0x94>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <MX_TIM11_Init+0x94>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_TIM11_Init+0x94>)
 80018c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018cc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <MX_TIM11_Init+0x94>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d4:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MX_TIM11_Init+0x94>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80018da:	4815      	ldr	r0, [pc, #84]	; (8001930 <MX_TIM11_Init+0x94>)
 80018dc:	f003 ff2f 	bl	800573e <HAL_TIM_Base_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80018e6:	f000 faad 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80018ea:	4811      	ldr	r0, [pc, #68]	; (8001930 <MX_TIM11_Init+0x94>)
 80018ec:	f003 ff7e 	bl	80057ec <HAL_TIM_PWM_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80018f6:	f000 faa5 	bl	8001e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fa:	2360      	movs	r3, #96	; 0x60
 80018fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2200      	movs	r2, #0
 800190e:	4619      	mov	r1, r3
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <MX_TIM11_Init+0x94>)
 8001912:	f004 fa61 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800191c:	f000 fa92 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <MX_TIM11_Init+0x94>)
 8001922:	f000 fdcb 	bl	80024bc <HAL_TIM_MspPostInit>

}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200003f8 	.word	0x200003f8
 8001934:	40014800 	.word	0x40014800

08001938 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	615a      	str	r2, [r3, #20]
 800194e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <MX_TIM13_Init+0x94>)
 8001952:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <MX_TIM13_Init+0x98>)
 8001954:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <MX_TIM13_Init+0x94>)
 8001958:	2200      	movs	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <MX_TIM13_Init+0x94>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <MX_TIM13_Init+0x94>)
 8001964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001968:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <MX_TIM13_Init+0x94>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <MX_TIM13_Init+0x94>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001976:	4815      	ldr	r0, [pc, #84]	; (80019cc <MX_TIM13_Init+0x94>)
 8001978:	f003 fee1 	bl	800573e <HAL_TIM_Base_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001982:	f000 fa5f 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001986:	4811      	ldr	r0, [pc, #68]	; (80019cc <MX_TIM13_Init+0x94>)
 8001988:	f003 ff30 	bl	80057ec <HAL_TIM_PWM_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001992:	f000 fa57 	bl	8001e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001996:	2360      	movs	r3, #96	; 0x60
 8001998:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	4619      	mov	r1, r3
 80019ac:	4807      	ldr	r0, [pc, #28]	; (80019cc <MX_TIM13_Init+0x94>)
 80019ae:	f004 fa13 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80019b8:	f000 fa44 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <MX_TIM13_Init+0x94>)
 80019be:	f000 fd7d 	bl	80024bc <HAL_TIM_MspPostInit>

}
 80019c2:	bf00      	nop
 80019c4:	3720      	adds	r7, #32
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000444 	.word	0x20000444
 80019d0:	40001c00 	.word	0x40001c00

080019d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <MX_UART4_Init+0x58>)
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <MX_UART4_Init+0x5c>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MX_UART4_Init+0x58>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_UART4_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_UART4_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_UART4_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_UART4_Init+0x58>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MX_UART4_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_UART4_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <MX_UART4_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_UART4_Init+0x58>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_UART4_Init+0x58>)
 8001a18:	f005 f9b0 	bl	8006d7c <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a22:	f000 fa0f 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000490 	.word	0x20000490
 8001a30:	40004c00 	.word	0x40004c00

08001a34 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_UART5_Init+0x58>)
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <MX_UART5_Init+0x5c>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <MX_UART5_Init+0x58>)
 8001a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a44:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_UART5_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_UART5_Init+0x58>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_UART5_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_UART5_Init+0x58>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_UART5_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_UART5_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_UART5_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_UART5_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_UART5_Init+0x58>)
 8001a78:	f005 f980 	bl	8006d7c <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001a82:	f000 f9df 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000518 	.word	0x20000518
 8001a90:	40005000 	.word	0x40005000

08001a94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <MX_USART1_UART_Init+0x58>)
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <MX_USART1_UART_Init+0x5c>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <MX_USART1_UART_Init+0x58>)
 8001aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_USART1_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_USART1_UART_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_USART1_UART_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_USART1_UART_Init+0x58>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_USART1_UART_Init+0x58>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_USART1_UART_Init+0x58>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <MX_USART1_UART_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_USART1_UART_Init+0x58>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_USART1_UART_Init+0x58>)
 8001ad8:	f005 f950 	bl	8006d7c <HAL_UART_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ae2:	f000 f9af 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200005a0 	.word	0x200005a0
 8001af0:	40011000 	.word	0x40011000

08001af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001afa:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <MX_USART2_UART_Init+0x5c>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_USART2_UART_Init+0x58>)
 8001b38:	f005 f920 	bl	8006d7c <HAL_UART_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b42:	f000 f97f 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000628 	.word	0x20000628
 8001b50:	40004400 	.word	0x40004400

08001b54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <MX_USART3_UART_Init+0x5c>)
 8001b5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_USART3_UART_Init+0x58>)
 8001b98:	f005 f8f0 	bl	8006d7c <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ba2:	f000 f94f 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200006b0 	.word	0x200006b0
 8001bb0:	40004800 	.word	0x40004800

08001bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08e      	sub	sp, #56	; 0x38
 8001bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bca:	4b97      	ldr	r3, [pc, #604]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a96      	ldr	r2, [pc, #600]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001bd0:	f043 0310 	orr.w	r3, r3, #16
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b94      	ldr	r3, [pc, #592]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	623b      	str	r3, [r7, #32]
 8001be0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	4b91      	ldr	r3, [pc, #580]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a90      	ldr	r2, [pc, #576]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b8e      	ldr	r3, [pc, #568]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bfa:	4b8b      	ldr	r3, [pc, #556]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a8a      	ldr	r2, [pc, #552]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c00:	f043 0320 	orr.w	r3, r3, #32
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c12:	4b85      	ldr	r3, [pc, #532]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a84      	ldr	r2, [pc, #528]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b82      	ldr	r3, [pc, #520]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	4b7f      	ldr	r3, [pc, #508]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a7e      	ldr	r2, [pc, #504]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b7c      	ldr	r3, [pc, #496]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	4b79      	ldr	r3, [pc, #484]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a78      	ldr	r2, [pc, #480]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b76      	ldr	r3, [pc, #472]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5a:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a72      	ldr	r2, [pc, #456]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b70      	ldr	r3, [pc, #448]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c72:	4b6d      	ldr	r3, [pc, #436]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a6c      	ldr	r2, [pc, #432]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <MX_GPIO_Init+0x274>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_PIN_3|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	211c      	movs	r1, #28
 8001c8e:	4867      	ldr	r0, [pc, #412]	; (8001e2c <MX_GPIO_Init+0x278>)
 8001c90:	f001 fd20 	bl	80036d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	f244 0181 	movw	r1, #16513	; 0x4081
 8001c9a:	4865      	ldr	r0, [pc, #404]	; (8001e30 <MX_GPIO_Init+0x27c>)
 8001c9c:	f001 fd1a 	bl	80036d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2140      	movs	r1, #64	; 0x40
 8001ca4:	4863      	ldr	r0, [pc, #396]	; (8001e34 <MX_GPIO_Init+0x280>)
 8001ca6:	f001 fd15 	bl	80036d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin PE3 GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_PIN_3|GPIO_OUT_SPI_CS_LCD_Pin;
 8001caa:	231c      	movs	r3, #28
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	485a      	ldr	r0, [pc, #360]	; (8001e2c <MX_GPIO_Init+0x278>)
 8001cc2:	f001 fb5b 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin;
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_EXTI2_PROXY_TOF_SENS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4857      	ldr	r0, [pc, #348]	; (8001e38 <MX_GPIO_Init+0x284>)
 8001cdc:	f001 fb4e 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin
                           GPIO_EXTI12_BUMP1_IRQ_Pin GPIO_EXTI13_BUMP2_IRQ_Pin GPIO_EXTI14_BUMP3_IRQ_Pin GPIO_EXTI15_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin
 8001ce0:	f24f 3318 	movw	r3, #62232	; 0xf318
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI12_BUMP1_IRQ_Pin|GPIO_EXTI13_BUMP2_IRQ_Pin|GPIO_EXTI14_BUMP3_IRQ_Pin|GPIO_EXTI15_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4850      	ldr	r0, [pc, #320]	; (8001e38 <MX_GPIO_Init+0x284>)
 8001cf8:	f001 fb40 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001cfc:	2332      	movs	r3, #50	; 0x32
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d0c:	230b      	movs	r3, #11
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	4849      	ldr	r0, [pc, #292]	; (8001e3c <MX_GPIO_Init+0x288>)
 8001d18:	f001 fb30 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d1c:	2386      	movs	r3, #134	; 0x86
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d2c:	230b      	movs	r3, #11
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d34:	4619      	mov	r1, r3
 8001d36:	4842      	ldr	r0, [pc, #264]	; (8001e40 <MX_GPIO_Init+0x28c>)
 8001d38:	f001 fb20 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001d3c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d52:	4619      	mov	r1, r3
 8001d54:	4836      	ldr	r0, [pc, #216]	; (8001e30 <MX_GPIO_Init+0x27c>)
 8001d56:	f001 fb11 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d6c:	230b      	movs	r3, #11
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d74:	4619      	mov	r1, r3
 8001d76:	482e      	ldr	r0, [pc, #184]	; (8001e30 <MX_GPIO_Init+0x27c>)
 8001d78:	f001 fb00 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d7c:	2340      	movs	r3, #64	; 0x40
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d80:	2301      	movs	r3, #1
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d90:	4619      	mov	r1, r3
 8001d92:	4828      	ldr	r0, [pc, #160]	; (8001e34 <MX_GPIO_Init+0x280>)
 8001d94:	f001 faf2 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	4619      	mov	r1, r3
 8001daa:	4822      	ldr	r0, [pc, #136]	; (8001e34 <MX_GPIO_Init+0x280>)
 8001dac:	f001 fae6 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001db0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dc2:	230a      	movs	r3, #10
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dca:	4619      	mov	r1, r3
 8001dcc:	481c      	ldr	r0, [pc, #112]	; (8001e40 <MX_GPIO_Init+0x28c>)
 8001dce:	f001 fad5 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de4:	4619      	mov	r1, r3
 8001de6:	4816      	ldr	r0, [pc, #88]	; (8001e40 <MX_GPIO_Init+0x28c>)
 8001de8:	f001 fac8 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001dec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dfe:	230b      	movs	r3, #11
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e06:	4619      	mov	r1, r3
 8001e08:	480a      	ldr	r0, [pc, #40]	; (8001e34 <MX_GPIO_Init+0x280>)
 8001e0a:	f001 fab7 	bl	800337c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2101      	movs	r1, #1
 8001e12:	2008      	movs	r0, #8
 8001e14:	f001 fa7b 	bl	800330e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e18:	2008      	movs	r0, #8
 8001e1a:	f001 fa94 	bl	8003346 <HAL_NVIC_EnableIRQ>

}
 8001e1e:	bf00      	nop
 8001e20:	3738      	adds	r7, #56	; 0x38
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40020400 	.word	0x40020400
 8001e34:	40021800 	.word	0x40021800
 8001e38:	40021400 	.word	0x40021400
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40020000 	.word	0x40020000

08001e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
}
 8001e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <Error_Handler+0x8>
	...

08001e50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_MspInit+0x44>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <HAL_MspInit+0x44>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_MspInit+0x44>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_MspInit+0x44>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_MspInit+0x44>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_MspInit+0x44>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800

08001e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <HAL_ADC_MspInit+0x74>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d123      	bne.n	8001f02 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_ADC_MspInit+0x78>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <HAL_ADC_MspInit+0x78>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_ADC_MspInit+0x78>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_ADC_MspInit+0x78>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_ADC_MspInit+0x78>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_ADC_MspInit+0x78>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001eea:	2308      	movs	r3, #8
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <HAL_ADC_MspInit+0x7c>)
 8001efe:	f001 fa3d 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40012000 	.word	0x40012000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000

08001f18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0b0      	sub	sp, #192	; 0xc0
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	2290      	movs	r2, #144	; 0x90
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f005 fc0a 	bl	8007752 <memset>
  if(hi2c->Instance==I2C1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a44      	ldr	r2, [pc, #272]	; (8002054 <HAL_I2C_MspInit+0x13c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d13e      	bne.n	8001fc6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 ff1d 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001f64:	f7ff ff6e 	bl	8001e44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f68:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4a3a      	ldr	r2, [pc, #232]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	6313      	str	r3, [r2, #48]	; 0x30
 8001f74:	4b38      	ldr	r3, [pc, #224]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f88:	2312      	movs	r3, #18
 8001f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	482d      	ldr	r0, [pc, #180]	; (800205c <HAL_I2C_MspInit+0x144>)
 8001fa8:	f001 f9e8 	bl	800337c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fac:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	4a29      	ldr	r2, [pc, #164]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fc4:	e041      	b.n	800204a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a25      	ldr	r2, [pc, #148]	; (8002060 <HAL_I2C_MspInit+0x148>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d13c      	bne.n	800204a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001fd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fd4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 fed9 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001fec:	f7ff ff2a 	bl	8001e44 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001ff6:	f043 0320 	orr.w	r3, r3, #32
 8001ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffc:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002008:	2303      	movs	r3, #3
 800200a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800200e:	2312      	movs	r3, #18
 8002010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002014:	2301      	movs	r3, #1
 8002016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002020:	2304      	movs	r3, #4
 8002022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002026:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800202a:	4619      	mov	r1, r3
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <HAL_I2C_MspInit+0x14c>)
 800202e:	f001 f9a5 	bl	800337c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8002038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
}
 800204a:	bf00      	nop
 800204c:	37c0      	adds	r7, #192	; 0xc0
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40005400 	.word	0x40005400
 8002058:	40023800 	.word	0x40023800
 800205c:	40020400 	.word	0x40020400
 8002060:	40005800 	.word	0x40005800
 8002064:	40021400 	.word	0x40021400

08002068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b090      	sub	sp, #64	; 0x40
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a67      	ldr	r2, [pc, #412]	; (8002224 <HAL_SPI_MspInit+0x1bc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d161      	bne.n	800214e <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800208a:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a66      	ldr	r2, [pc, #408]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 8002090:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b64      	ldr	r3, [pc, #400]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	4b61      	ldr	r3, [pc, #388]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a60      	ldr	r2, [pc, #384]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ba:	4b5b      	ldr	r3, [pc, #364]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a5a      	ldr	r2, [pc, #360]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 80020c0:	f043 0308 	orr.w	r3, r3, #8
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b58      	ldr	r3, [pc, #352]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	623b      	str	r3, [r7, #32]
 80020d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020d2:	4b55      	ldr	r3, [pc, #340]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a54      	ldr	r2, [pc, #336]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 80020d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b52      	ldr	r3, [pc, #328]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020ea:	2320      	movs	r3, #32
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020fa:	2305      	movs	r3, #5
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002102:	4619      	mov	r1, r3
 8002104:	4849      	ldr	r0, [pc, #292]	; (800222c <HAL_SPI_MspInit+0x1c4>)
 8002106:	f001 f939 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800211a:	2305      	movs	r3, #5
 800211c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002122:	4619      	mov	r1, r3
 8002124:	4842      	ldr	r0, [pc, #264]	; (8002230 <HAL_SPI_MspInit+0x1c8>)
 8002126:	f001 f929 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800212a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800213c:	2305      	movs	r3, #5
 800213e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002144:	4619      	mov	r1, r3
 8002146:	483b      	ldr	r0, [pc, #236]	; (8002234 <HAL_SPI_MspInit+0x1cc>)
 8002148:	f001 f918 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800214c:	e065      	b.n	800221a <HAL_SPI_MspInit+0x1b2>
  else if(hspi->Instance==SPI2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a39      	ldr	r2, [pc, #228]	; (8002238 <HAL_SPI_MspInit+0x1d0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d160      	bne.n	800221a <HAL_SPI_MspInit+0x1b2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002158:	4b33      	ldr	r3, [pc, #204]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	4a32      	ldr	r2, [pc, #200]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 800215e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002162:	6413      	str	r3, [r2, #64]	; 0x40
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	6313      	str	r3, [r2, #48]	; 0x30
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a26      	ldr	r2, [pc, #152]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	6313      	str	r3, [r2, #48]	; 0x30
 8002194:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a0:	4b21      	ldr	r3, [pc, #132]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	4a20      	ldr	r2, [pc, #128]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 80021a6:	f043 0308 	orr.w	r3, r3, #8
 80021aa:	6313      	str	r3, [r2, #48]	; 0x30
 80021ac:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_SPI_MspInit+0x1c0>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021b8:	230c      	movs	r3, #12
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021c8:	2305      	movs	r3, #5
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d0:	4619      	mov	r1, r3
 80021d2:	481a      	ldr	r0, [pc, #104]	; (800223c <HAL_SPI_MspInit+0x1d4>)
 80021d4:	f001 f8d2 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021ea:	2305      	movs	r3, #5
 80021ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f2:	4619      	mov	r1, r3
 80021f4:	4812      	ldr	r0, [pc, #72]	; (8002240 <HAL_SPI_MspInit+0x1d8>)
 80021f6:	f001 f8c1 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021fa:	2308      	movs	r3, #8
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800220a:	2305      	movs	r3, #5
 800220c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002212:	4619      	mov	r1, r3
 8002214:	4806      	ldr	r0, [pc, #24]	; (8002230 <HAL_SPI_MspInit+0x1c8>)
 8002216:	f001 f8b1 	bl	800337c <HAL_GPIO_Init>
}
 800221a:	bf00      	nop
 800221c:	3740      	adds	r7, #64	; 0x40
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40013000 	.word	0x40013000
 8002228:	40023800 	.word	0x40023800
 800222c:	40020000 	.word	0x40020000
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40021800 	.word	0x40021800
 8002238:	40003800 	.word	0x40003800
 800223c:	40020800 	.word	0x40020800
 8002240:	40020400 	.word	0x40020400

08002244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08e      	sub	sp, #56	; 0x38
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a44      	ldr	r2, [pc, #272]	; (8002374 <HAL_TIM_Base_MspInit+0x130>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d10c      	bne.n	8002280 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002266:	4b44      	ldr	r3, [pc, #272]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	4a43      	ldr	r2, [pc, #268]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6453      	str	r3, [r2, #68]	; 0x44
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	623b      	str	r3, [r7, #32]
 800227c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800227e:	e075      	b.n	800236c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002288:	d129      	bne.n	80022de <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800228a:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a3a      	ldr	r2, [pc, #232]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	4b35      	ldr	r3, [pc, #212]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a34      	ldr	r2, [pc, #208]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b32      	ldr	r3, [pc, #200]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 80022ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022cc:	2301      	movs	r3, #1
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d4:	4619      	mov	r1, r3
 80022d6:	4829      	ldr	r0, [pc, #164]	; (800237c <HAL_TIM_Base_MspInit+0x138>)
 80022d8:	f001 f850 	bl	800337c <HAL_GPIO_Init>
}
 80022dc:	e046      	b.n	800236c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM5)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a27      	ldr	r2, [pc, #156]	; (8002380 <HAL_TIM_Base_MspInit+0x13c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d10c      	bne.n	8002302 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022e8:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	4a22      	ldr	r2, [pc, #136]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6413      	str	r3, [r2, #64]	; 0x40
 80022f4:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697b      	ldr	r3, [r7, #20]
}
 8002300:	e034      	b.n	800236c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM8)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1f      	ldr	r2, [pc, #124]	; (8002384 <HAL_TIM_Base_MspInit+0x140>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d10c      	bne.n	8002326 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	4a19      	ldr	r2, [pc, #100]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	6453      	str	r3, [r2, #68]	; 0x44
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]
}
 8002324:	e022      	b.n	800236c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM11)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a17      	ldr	r2, [pc, #92]	; (8002388 <HAL_TIM_Base_MspInit+0x144>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d10c      	bne.n	800234a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 8002336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800233a:	6453      	str	r3, [r2, #68]	; 0x44
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	e010      	b.n	800236c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a0f      	ldr	r2, [pc, #60]	; (800238c <HAL_TIM_Base_MspInit+0x148>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d10b      	bne.n	800236c <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 800235a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235e:	6413      	str	r3, [r2, #64]	; 0x40
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_TIM_Base_MspInit+0x134>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
}
 800236c:	bf00      	nop
 800236e:	3738      	adds	r7, #56	; 0x38
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40010000 	.word	0x40010000
 8002378:	40023800 	.word	0x40023800
 800237c:	40020400 	.word	0x40020400
 8002380:	40000c00 	.word	0x40000c00
 8002384:	40010400 	.word	0x40010400
 8002388:	40014800 	.word	0x40014800
 800238c:	40001c00 	.word	0x40001c00

08002390 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	; 0x30
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <HAL_TIM_Encoder_MspInit+0xd8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d128      	bne.n	8002404 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023b2:	4b2e      	ldr	r3, [pc, #184]	; (800246c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a2d      	ldr	r2, [pc, #180]	; (800246c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
 80023be:	4b2b      	ldr	r3, [pc, #172]	; (800246c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	4b28      	ldr	r3, [pc, #160]	; (800246c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a27      	ldr	r2, [pc, #156]	; (800246c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 80023e2:	2330      	movs	r3, #48	; 0x30
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023f2:	2302      	movs	r3, #2
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	481c      	ldr	r0, [pc, #112]	; (8002470 <HAL_TIM_Encoder_MspInit+0xe0>)
 80023fe:	f000 ffbd 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002402:	e02d      	b.n	8002460 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <HAL_TIM_Encoder_MspInit+0xe4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d128      	bne.n	8002460 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_TIM_Encoder_MspInit+0xdc>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_TIM_Encoder_MspInit+0xdc>)
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 800243e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002450:	2302      	movs	r3, #2
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002454:	f107 031c 	add.w	r3, r7, #28
 8002458:	4619      	mov	r1, r3
 800245a:	4807      	ldr	r0, [pc, #28]	; (8002478 <HAL_TIM_Encoder_MspInit+0xe8>)
 800245c:	f000 ff8e 	bl	800337c <HAL_GPIO_Init>
}
 8002460:	bf00      	nop
 8002462:	3730      	adds	r7, #48	; 0x30
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40000400 	.word	0x40000400
 800246c:	40023800 	.word	0x40023800
 8002470:	40020400 	.word	0x40020400
 8002474:	40000800 	.word	0x40000800
 8002478:	40020c00 	.word	0x40020c00

0800247c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <HAL_TIM_PWM_MspInit+0x38>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10b      	bne.n	80024a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40014000 	.word	0x40014000
 80024b8:	40023800 	.word	0x40023800

080024bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08e      	sub	sp, #56	; 0x38
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a78      	ldr	r2, [pc, #480]	; (80026bc <HAL_TIM_MspPostInit+0x200>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d11d      	bne.n	800251a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024de:	4b78      	ldr	r3, [pc, #480]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a77      	ldr	r2, [pc, #476]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 80024e4:	f043 0310 	orr.w	r3, r3, #16
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b75      	ldr	r3, [pc, #468]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	623b      	str	r3, [r7, #32]
 80024f4:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 80024f6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002508:	2301      	movs	r3, #1
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800250c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002510:	4619      	mov	r1, r3
 8002512:	486c      	ldr	r0, [pc, #432]	; (80026c4 <HAL_TIM_MspPostInit+0x208>)
 8002514:	f000 ff32 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002518:	e0cc      	b.n	80026b4 <HAL_TIM_MspPostInit+0x1f8>
  else if(htim->Instance==TIM2)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002522:	d11d      	bne.n	8002560 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002524:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	4a65      	ldr	r2, [pc, #404]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6313      	str	r3, [r2, #48]	; 0x30
 8002530:	4b63      	ldr	r3, [pc, #396]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 800253c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2300      	movs	r3, #0
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800254e:	2301      	movs	r3, #1
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002556:	4619      	mov	r1, r3
 8002558:	485b      	ldr	r0, [pc, #364]	; (80026c8 <HAL_TIM_MspPostInit+0x20c>)
 800255a:	f000 ff0f 	bl	800337c <HAL_GPIO_Init>
}
 800255e:	e0a9      	b.n	80026b4 <HAL_TIM_MspPostInit+0x1f8>
  else if(htim->Instance==TIM5)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a59      	ldr	r2, [pc, #356]	; (80026cc <HAL_TIM_MspPostInit+0x210>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d11c      	bne.n	80025a4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	4b55      	ldr	r3, [pc, #340]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a54      	ldr	r2, [pc, #336]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	61bb      	str	r3, [r7, #24]
 8002580:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002582:	2301      	movs	r3, #1
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002592:	2302      	movs	r3, #2
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259a:	4619      	mov	r1, r3
 800259c:	484a      	ldr	r0, [pc, #296]	; (80026c8 <HAL_TIM_MspPostInit+0x20c>)
 800259e:	f000 feed 	bl	800337c <HAL_GPIO_Init>
}
 80025a2:	e087      	b.n	80026b4 <HAL_TIM_MspPostInit+0x1f8>
  else if(htim->Instance==TIM8)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a49      	ldr	r2, [pc, #292]	; (80026d0 <HAL_TIM_MspPostInit+0x214>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d11d      	bne.n	80025ea <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ae:	4b44      	ldr	r3, [pc, #272]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a43      	ldr	r2, [pc, #268]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 80025c6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025d8:	2303      	movs	r3, #3
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e0:	4619      	mov	r1, r3
 80025e2:	483c      	ldr	r0, [pc, #240]	; (80026d4 <HAL_TIM_MspPostInit+0x218>)
 80025e4:	f000 feca 	bl	800337c <HAL_GPIO_Init>
}
 80025e8:	e064      	b.n	80026b4 <HAL_TIM_MspPostInit+0x1f8>
  else if(htim->Instance==TIM9)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a3a      	ldr	r2, [pc, #232]	; (80026d8 <HAL_TIM_MspPostInit+0x21c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d11c      	bne.n	800262e <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	4a31      	ldr	r2, [pc, #196]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 80025fa:	f043 0310 	orr.w	r3, r3, #16
 80025fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002600:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 800260c:	2360      	movs	r3, #96	; 0x60
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800261c:	2303      	movs	r3, #3
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002624:	4619      	mov	r1, r3
 8002626:	4827      	ldr	r0, [pc, #156]	; (80026c4 <HAL_TIM_MspPostInit+0x208>)
 8002628:	f000 fea8 	bl	800337c <HAL_GPIO_Init>
}
 800262c:	e042      	b.n	80026b4 <HAL_TIM_MspPostInit+0x1f8>
  else if(htim->Instance==TIM11)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2a      	ldr	r2, [pc, #168]	; (80026dc <HAL_TIM_MspPostInit+0x220>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d11c      	bne.n	8002672 <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	4a20      	ldr	r2, [pc, #128]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 800263e:	f043 0320 	orr.w	r3, r3, #32
 8002642:	6313      	str	r3, [r2, #48]	; 0x30
 8002644:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM11_CH1_USER_LED3_Pin;
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002660:	2303      	movs	r3, #3
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM11_CH1_USER_LED3_GPIO_Port, &GPIO_InitStruct);
 8002664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002668:	4619      	mov	r1, r3
 800266a:	481d      	ldr	r0, [pc, #116]	; (80026e0 <HAL_TIM_MspPostInit+0x224>)
 800266c:	f000 fe86 	bl	800337c <HAL_GPIO_Init>
}
 8002670:	e020      	b.n	80026b4 <HAL_TIM_MspPostInit+0x1f8>
  else if(htim->Instance==TIM13)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1b      	ldr	r2, [pc, #108]	; (80026e4 <HAL_TIM_MspPostInit+0x228>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d11b      	bne.n	80026b4 <HAL_TIM_MspPostInit+0x1f8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	4a0f      	ldr	r2, [pc, #60]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6313      	str	r3, [r2, #48]	; 0x30
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_TIM_MspPostInit+0x204>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM13_CH1_USER_LED4_Pin;
 8002694:	2340      	movs	r3, #64	; 0x40
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80026a4:	2309      	movs	r3, #9
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM13_CH1_USER_LED4_GPIO_Port, &GPIO_InitStruct);
 80026a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ac:	4619      	mov	r1, r3
 80026ae:	4806      	ldr	r0, [pc, #24]	; (80026c8 <HAL_TIM_MspPostInit+0x20c>)
 80026b0:	f000 fe64 	bl	800337c <HAL_GPIO_Init>
}
 80026b4:	bf00      	nop
 80026b6:	3738      	adds	r7, #56	; 0x38
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40010000 	.word	0x40010000
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40000c00 	.word	0x40000c00
 80026d0:	40010400 	.word	0x40010400
 80026d4:	40020800 	.word	0x40020800
 80026d8:	40014000 	.word	0x40014000
 80026dc:	40014800 	.word	0x40014800
 80026e0:	40021400 	.word	0x40021400
 80026e4:	40001c00 	.word	0x40001c00

080026e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b0b6      	sub	sp, #216	; 0xd8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002700:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002704:	2290      	movs	r2, #144	; 0x90
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f005 f822 	bl	8007752 <memset>
  if(huart->Instance==UART4)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a9f      	ldr	r2, [pc, #636]	; (8002990 <HAL_UART_MspInit+0x2a8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d13e      	bne.n	8002796 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002724:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002728:	4618      	mov	r0, r3
 800272a:	f002 fb35 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002734:	f7ff fb86 	bl	8001e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002738:	4b96      	ldr	r3, [pc, #600]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	4a95      	ldr	r2, [pc, #596]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 800273e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002742:	6413      	str	r3, [r2, #64]	; 0x40
 8002744:	4b93      	ldr	r3, [pc, #588]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002750:	4b90      	ldr	r3, [pc, #576]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	4a8f      	ldr	r2, [pc, #572]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 8002756:	f043 0304 	orr.w	r3, r3, #4
 800275a:	6313      	str	r3, [r2, #48]	; 0x30
 800275c:	4b8d      	ldr	r3, [pc, #564]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002768:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800276c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002782:	2308      	movs	r3, #8
 8002784:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002788:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800278c:	4619      	mov	r1, r3
 800278e:	4882      	ldr	r0, [pc, #520]	; (8002998 <HAL_UART_MspInit+0x2b0>)
 8002790:	f000 fdf4 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002794:	e14f      	b.n	8002a36 <HAL_UART_MspInit+0x34e>
  else if(huart->Instance==UART5)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a80      	ldr	r2, [pc, #512]	; (800299c <HAL_UART_MspInit+0x2b4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d15f      	bne.n	8002860 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80027a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027b0:	4618      	mov	r0, r3
 80027b2:	f002 faf1 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80027bc:	f7ff fb42 	bl	8001e44 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80027c0:	4b74      	ldr	r3, [pc, #464]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	4a73      	ldr	r2, [pc, #460]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 80027c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ca:	6413      	str	r3, [r2, #64]	; 0x40
 80027cc:	4b71      	ldr	r3, [pc, #452]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d8:	4b6e      	ldr	r3, [pc, #440]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	4a6d      	ldr	r2, [pc, #436]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6313      	str	r3, [r2, #48]	; 0x30
 80027e4:	4b6b      	ldr	r3, [pc, #428]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f0:	4b68      	ldr	r3, [pc, #416]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4a67      	ldr	r2, [pc, #412]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	6313      	str	r3, [r2, #48]	; 0x30
 80027fc:	4b65      	ldr	r3, [pc, #404]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002822:	2308      	movs	r3, #8
 8002824:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002828:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800282c:	4619      	mov	r1, r3
 800282e:	485a      	ldr	r0, [pc, #360]	; (8002998 <HAL_UART_MspInit+0x2b0>)
 8002830:	f000 fda4 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002834:	2304      	movs	r3, #4
 8002836:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002846:	2303      	movs	r3, #3
 8002848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800284c:	2308      	movs	r3, #8
 800284e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002852:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002856:	4619      	mov	r1, r3
 8002858:	4851      	ldr	r0, [pc, #324]	; (80029a0 <HAL_UART_MspInit+0x2b8>)
 800285a:	f000 fd8f 	bl	800337c <HAL_GPIO_Init>
}
 800285e:	e0ea      	b.n	8002a36 <HAL_UART_MspInit+0x34e>
  else if(huart->Instance==USART1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a4f      	ldr	r2, [pc, #316]	; (80029a4 <HAL_UART_MspInit+0x2bc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d151      	bne.n	800290e <HAL_UART_MspInit+0x226>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800286a:	2340      	movs	r3, #64	; 0x40
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800286e:	2300      	movs	r3, #0
 8002870:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002872:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002876:	4618      	mov	r0, r3
 8002878:	f002 fa8e 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8002882:	f7ff fadf 	bl	8001e44 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002886:	4b43      	ldr	r3, [pc, #268]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a42      	ldr	r2, [pc, #264]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 800288c:	f043 0310 	orr.w	r3, r3, #16
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b40      	ldr	r3, [pc, #256]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a3c      	ldr	r2, [pc, #240]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b3a      	ldr	r3, [pc, #232]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ca:	2303      	movs	r3, #3
 80028cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80028d0:	2304      	movs	r3, #4
 80028d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028da:	4619      	mov	r1, r3
 80028dc:	4832      	ldr	r0, [pc, #200]	; (80029a8 <HAL_UART_MspInit+0x2c0>)
 80028de:	f000 fd4d 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028e2:	2340      	movs	r3, #64	; 0x40
 80028e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028fa:	2307      	movs	r3, #7
 80028fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002900:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002904:	4619      	mov	r1, r3
 8002906:	4828      	ldr	r0, [pc, #160]	; (80029a8 <HAL_UART_MspInit+0x2c0>)
 8002908:	f000 fd38 	bl	800337c <HAL_GPIO_Init>
}
 800290c:	e093      	b.n	8002a36 <HAL_UART_MspInit+0x34e>
  else if(huart->Instance==USART2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a26      	ldr	r2, [pc, #152]	; (80029ac <HAL_UART_MspInit+0x2c4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d14b      	bne.n	80029b0 <HAL_UART_MspInit+0x2c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002918:	2380      	movs	r3, #128	; 0x80
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800291c:	2300      	movs	r3, #0
 800291e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002920:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002924:	4618      	mov	r0, r3
 8002926:	f002 fa37 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_UART_MspInit+0x24c>
      Error_Handler();
 8002930:	f7ff fa88 	bl	8001e44 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002934:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	4a16      	ldr	r2, [pc, #88]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 800293a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293e:	6413      	str	r3, [r2, #64]	; 0x40
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	4a10      	ldr	r2, [pc, #64]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 8002952:	f043 0308 	orr.w	r3, r3, #8
 8002956:	6313      	str	r3, [r2, #48]	; 0x30
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_UART_MspInit+0x2ac>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002964:	2360      	movs	r3, #96	; 0x60
 8002966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002976:	2303      	movs	r3, #3
 8002978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800297c:	2307      	movs	r3, #7
 800297e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002982:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002986:	4619      	mov	r1, r3
 8002988:	4805      	ldr	r0, [pc, #20]	; (80029a0 <HAL_UART_MspInit+0x2b8>)
 800298a:	f000 fcf7 	bl	800337c <HAL_GPIO_Init>
}
 800298e:	e052      	b.n	8002a36 <HAL_UART_MspInit+0x34e>
 8002990:	40004c00 	.word	0x40004c00
 8002994:	40023800 	.word	0x40023800
 8002998:	40020800 	.word	0x40020800
 800299c:	40005000 	.word	0x40005000
 80029a0:	40020c00 	.word	0x40020c00
 80029a4:	40011000 	.word	0x40011000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <HAL_UART_MspInit+0x358>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d13d      	bne.n	8002a36 <HAL_UART_MspInit+0x34e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 f9e4 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_UART_MspInit+0x2f2>
      Error_Handler();
 80029d6:	f7ff fa35 	bl	8001e44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_UART_MspInit+0x35c>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_UART_MspInit+0x35c>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <HAL_UART_MspInit+0x35c>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_UART_MspInit+0x35c>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <HAL_UART_MspInit+0x35c>)
 80029f8:	f043 0308 	orr.w	r3, r3, #8
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_UART_MspInit+0x35c>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a24:	2307      	movs	r3, #7
 8002a26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a2a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4805      	ldr	r0, [pc, #20]	; (8002a48 <HAL_UART_MspInit+0x360>)
 8002a32:	f000 fca3 	bl	800337c <HAL_GPIO_Init>
}
 8002a36:	bf00      	nop
 8002a38:	37d8      	adds	r7, #216	; 0xd8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40004800 	.word	0x40004800
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020c00 	.word	0x40020c00

08002a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <NMI_Handler+0x4>

08002a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a56:	e7fe      	b.n	8002a56 <HardFault_Handler+0x4>

08002a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a5c:	e7fe      	b.n	8002a5c <MemManage_Handler+0x4>

08002a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a62:	e7fe      	b.n	8002a62 <BusFault_Handler+0x4>

08002a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <UsageFault_Handler+0x4>

08002a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a98:	f000 f886 	bl	8002ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin);
 8002aa4:	2004      	movs	r0, #4
 8002aa6:	f000 fe2f 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <SystemInit+0x28>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <SystemInit+0x28>)
 8002abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <SystemInit+0x28>)
 8002ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aca:	609a      	str	r2, [r3, #8]
#endif
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ae0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ae2:	e003      	b.n	8002aec <LoopCopyDataInit>

08002ae4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ae6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ae8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002aea:	3104      	adds	r1, #4

08002aec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002aec:	480b      	ldr	r0, [pc, #44]	; (8002b1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002af0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002af2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002af4:	d3f6      	bcc.n	8002ae4 <CopyDataInit>
  ldr  r2, =_sbss
 8002af6:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002af8:	e002      	b.n	8002b00 <LoopFillZerobss>

08002afa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002afa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002afc:	f842 3b04 	str.w	r3, [r2], #4

08002b00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b04:	d3f9      	bcc.n	8002afa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b06:	f7ff ffd3 	bl	8002ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b0a:	f004 fe2b 	bl	8007764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b0e:	f7fe f87f 	bl	8000c10 <main>
  bx  lr    
 8002b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b14:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002b18:	08007808 	.word	0x08007808
  ldr  r0, =_sdata
 8002b1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b20:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002b24:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002b28:	20000830 	.word	0x20000830

08002b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b2c:	e7fe      	b.n	8002b2c <ADC_IRQHandler>

08002b2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b32:	2003      	movs	r0, #3
 8002b34:	f000 fbe0 	bl	80032f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f000 f805 	bl	8002b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b3e:	f7ff f987 	bl	8001e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_InitTick+0x54>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_InitTick+0x58>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fbfb 	bl	8003362 <HAL_SYSTICK_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00e      	b.n	8002b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b0f      	cmp	r3, #15
 8002b7a:	d80a      	bhi.n	8002b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b84:	f000 fbc3 	bl	800330e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b88:	4a06      	ldr	r2, [pc, #24]	; (8002ba4 <HAL_InitTick+0x5c>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	20000008 	.word	0x20000008
 8002ba4:	20000004 	.word	0x20000004

08002ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_IncTick+0x20>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_IncTick+0x24>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <HAL_IncTick+0x24>)
 8002bba:	6013      	str	r3, [r2, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000008 	.word	0x20000008
 8002bcc:	2000082c 	.word	0x2000082c

08002bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_GetTick+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	2000082c 	.word	0x2000082c

08002be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff ffee 	bl	8002bd0 <HAL_GetTick>
 8002bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c00:	d005      	beq.n	8002c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_Delay+0x44>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c0e:	bf00      	nop
 8002c10:	f7ff ffde 	bl	8002bd0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d8f7      	bhi.n	8002c10 <HAL_Delay+0x28>
  {
  }
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000008 	.word	0x20000008

08002c30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e031      	b.n	8002caa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff f922 	bl	8001e98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d116      	bne.n	8002c9c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_ADC_Init+0x84>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	f043 0202 	orr.w	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f970 	bl	8002f64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f023 0303 	bic.w	r3, r3, #3
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
 8002c9a:	e001      	b.n	8002ca0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	ffffeefd 	.word	0xffffeefd

08002cb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x1c>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e136      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x28a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b09      	cmp	r3, #9
 8002ce2:	d93a      	bls.n	8002d5a <HAL_ADC_ConfigChannel+0xa2>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cec:	d035      	beq.n	8002d5a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68d9      	ldr	r1, [r3, #12]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	3b1e      	subs	r3, #30
 8002d04:	2207      	movs	r2, #7
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	400a      	ands	r2, r1
 8002d12:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a8d      	ldr	r2, [pc, #564]	; (8002f50 <HAL_ADC_ConfigChannel+0x298>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d10a      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68d9      	ldr	r1, [r3, #12]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	061a      	lsls	r2, r3, #24
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d32:	e035      	b.n	8002da0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68d9      	ldr	r1, [r3, #12]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4618      	mov	r0, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4403      	add	r3, r0
 8002d4c:	3b1e      	subs	r3, #30
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d58:	e022      	b.n	8002da0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6919      	ldr	r1, [r3, #16]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	2207      	movs	r2, #7
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43da      	mvns	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	400a      	ands	r2, r1
 8002d7c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6919      	ldr	r1, [r3, #16]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	4603      	mov	r3, r0
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4403      	add	r3, r0
 8002d96:	409a      	lsls	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d824      	bhi.n	8002df2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	3b05      	subs	r3, #5
 8002dba:	221f      	movs	r2, #31
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	400a      	ands	r2, r1
 8002dc8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	3b05      	subs	r3, #5
 8002de4:	fa00 f203 	lsl.w	r2, r0, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	635a      	str	r2, [r3, #52]	; 0x34
 8002df0:	e04c      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	d824      	bhi.n	8002e44 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	3b23      	subs	r3, #35	; 0x23
 8002e0c:	221f      	movs	r2, #31
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	400a      	ands	r2, r1
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	3b23      	subs	r3, #35	; 0x23
 8002e36:	fa00 f203 	lsl.w	r2, r0, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
 8002e42:	e023      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	3b41      	subs	r3, #65	; 0x41
 8002e56:	221f      	movs	r2, #31
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43da      	mvns	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	400a      	ands	r2, r1
 8002e64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	4618      	mov	r0, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3b41      	subs	r3, #65	; 0x41
 8002e80:	fa00 f203 	lsl.w	r2, r0, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a30      	ldr	r2, [pc, #192]	; (8002f54 <HAL_ADC_ConfigChannel+0x29c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10a      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x1f4>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e9e:	d105      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ea6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002eaa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a28      	ldr	r2, [pc, #160]	; (8002f54 <HAL_ADC_ConfigChannel+0x29c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x21e>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b12      	cmp	r3, #18
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ec4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ec8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002eca:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ed0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ed4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1e      	ldr	r2, [pc, #120]	; (8002f54 <HAL_ADC_ConfigChannel+0x29c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d12b      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x280>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <HAL_ADC_ConfigChannel+0x298>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d003      	beq.n	8002ef2 <HAL_ADC_ConfigChannel+0x23a>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b11      	cmp	r3, #17
 8002ef0:	d122      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002ef2:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002efc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f08:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <HAL_ADC_ConfigChannel+0x298>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d111      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_ADC_ConfigChannel+0x2a4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a11      	ldr	r2, [pc, #68]	; (8002f60 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0c9a      	lsrs	r2, r3, #18
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f2a:	e002      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f9      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	10000012 	.word	0x10000012
 8002f54:	40012000 	.word	0x40012000
 8002f58:	40012300 	.word	0x40012300
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	431bde83 	.word	0x431bde83

08002f64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f6c:	4b78      	ldr	r3, [pc, #480]	; (8003150 <ADC_Init+0x1ec>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a77      	ldr	r2, [pc, #476]	; (8003150 <ADC_Init+0x1ec>)
 8002f72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f76:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f78:	4b75      	ldr	r3, [pc, #468]	; (8003150 <ADC_Init+0x1ec>)
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4973      	ldr	r1, [pc, #460]	; (8003150 <ADC_Init+0x1ec>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	021a      	lsls	r2, r3, #8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6899      	ldr	r1, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	4a58      	ldr	r2, [pc, #352]	; (8003154 <ADC_Init+0x1f0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d022      	beq.n	800303e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003006:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6899      	ldr	r1, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003028:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6899      	ldr	r1, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	e00f      	b.n	800305e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800304c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800305c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0202 	bic.w	r2, r2, #2
 800306c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6899      	ldr	r1, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	005a      	lsls	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01b      	beq.n	80030c4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800309a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	3b01      	subs	r3, #1
 80030b8:	035a      	lsls	r2, r3, #13
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	e007      	b.n	80030d4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	051a      	lsls	r2, r3, #20
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6899      	ldr	r1, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003116:	025a      	lsls	r2, r3, #9
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6899      	ldr	r1, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	029a      	lsls	r2, r3, #10
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	609a      	str	r2, [r3, #8]
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	40012300 	.word	0x40012300
 8003154:	0f000001 	.word	0x0f000001

08003158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <__NVIC_SetPriorityGrouping+0x40>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003174:	4013      	ands	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <__NVIC_SetPriorityGrouping+0x44>)
 8003182:	4313      	orrs	r3, r2
 8003184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003186:	4a04      	ldr	r2, [pc, #16]	; (8003198 <__NVIC_SetPriorityGrouping+0x40>)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	60d3      	str	r3, [r2, #12]
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000ed00 	.word	0xe000ed00
 800319c:	05fa0000 	.word	0x05fa0000

080031a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a4:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <__NVIC_GetPriorityGrouping+0x18>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	f003 0307 	and.w	r3, r3, #7
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	db0b      	blt.n	80031e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	f003 021f 	and.w	r2, r3, #31
 80031d4:	4907      	ldr	r1, [pc, #28]	; (80031f4 <__NVIC_EnableIRQ+0x38>)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2001      	movs	r0, #1
 80031de:	fa00 f202 	lsl.w	r2, r0, r2
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000e100 	.word	0xe000e100

080031f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	6039      	str	r1, [r7, #0]
 8003202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003208:	2b00      	cmp	r3, #0
 800320a:	db0a      	blt.n	8003222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	b2da      	uxtb	r2, r3
 8003210:	490c      	ldr	r1, [pc, #48]	; (8003244 <__NVIC_SetPriority+0x4c>)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	0112      	lsls	r2, r2, #4
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	440b      	add	r3, r1
 800321c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003220:	e00a      	b.n	8003238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	b2da      	uxtb	r2, r3
 8003226:	4908      	ldr	r1, [pc, #32]	; (8003248 <__NVIC_SetPriority+0x50>)
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	3b04      	subs	r3, #4
 8003230:	0112      	lsls	r2, r2, #4
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	440b      	add	r3, r1
 8003236:	761a      	strb	r2, [r3, #24]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000e100 	.word	0xe000e100
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800324c:	b480      	push	{r7}
 800324e:	b089      	sub	sp, #36	; 0x24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f1c3 0307 	rsb	r3, r3, #7
 8003266:	2b04      	cmp	r3, #4
 8003268:	bf28      	it	cs
 800326a:	2304      	movcs	r3, #4
 800326c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3304      	adds	r3, #4
 8003272:	2b06      	cmp	r3, #6
 8003274:	d902      	bls.n	800327c <NVIC_EncodePriority+0x30>
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3b03      	subs	r3, #3
 800327a:	e000      	b.n	800327e <NVIC_EncodePriority+0x32>
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43da      	mvns	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	401a      	ands	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003294:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	43d9      	mvns	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a4:	4313      	orrs	r3, r2
         );
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3724      	adds	r7, #36	; 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3b01      	subs	r3, #1
 80032c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c4:	d301      	bcc.n	80032ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032c6:	2301      	movs	r3, #1
 80032c8:	e00f      	b.n	80032ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ca:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <SysTick_Config+0x40>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032d2:	210f      	movs	r1, #15
 80032d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032d8:	f7ff ff8e 	bl	80031f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <SysTick_Config+0x40>)
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032e2:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <SysTick_Config+0x40>)
 80032e4:	2207      	movs	r2, #7
 80032e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	e000e010 	.word	0xe000e010

080032f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ff29 	bl	8003158 <__NVIC_SetPriorityGrouping>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	4603      	mov	r3, r0
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003320:	f7ff ff3e 	bl	80031a0 <__NVIC_GetPriorityGrouping>
 8003324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	6978      	ldr	r0, [r7, #20]
 800332c:	f7ff ff8e 	bl	800324c <NVIC_EncodePriority>
 8003330:	4602      	mov	r2, r0
 8003332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff5d 	bl	80031f8 <__NVIC_SetPriority>
}
 800333e:	bf00      	nop
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	4603      	mov	r3, r0
 800334e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff ff31 	bl	80031bc <__NVIC_EnableIRQ>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ffa2 	bl	80032b4 <SysTick_Config>
 8003370:	4603      	mov	r3, r0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	e175      	b.n	8003688 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800339c:	2201      	movs	r2, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	f040 8164 	bne.w	8003682 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d005      	beq.n	80033d2 <HAL_GPIO_Init+0x56>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d130      	bne.n	8003434 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	2203      	movs	r2, #3
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003408:	2201      	movs	r2, #1
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 0201 	and.w	r2, r3, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b03      	cmp	r3, #3
 800343e:	d017      	beq.n	8003470 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	2203      	movs	r2, #3
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d123      	bne.n	80034c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	08da      	lsrs	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3208      	adds	r2, #8
 8003484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	220f      	movs	r2, #15
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	08da      	lsrs	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3208      	adds	r2, #8
 80034be:	69b9      	ldr	r1, [r7, #24]
 80034c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2203      	movs	r2, #3
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0203 	and.w	r2, r3, #3
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80be 	beq.w	8003682 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003506:	4b66      	ldr	r3, [pc, #408]	; (80036a0 <HAL_GPIO_Init+0x324>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	4a65      	ldr	r2, [pc, #404]	; (80036a0 <HAL_GPIO_Init+0x324>)
 800350c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003510:	6453      	str	r3, [r2, #68]	; 0x44
 8003512:	4b63      	ldr	r3, [pc, #396]	; (80036a0 <HAL_GPIO_Init+0x324>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800351e:	4a61      	ldr	r2, [pc, #388]	; (80036a4 <HAL_GPIO_Init+0x328>)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <HAL_GPIO_Init+0x32c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d037      	beq.n	80035ba <HAL_GPIO_Init+0x23e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a57      	ldr	r2, [pc, #348]	; (80036ac <HAL_GPIO_Init+0x330>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d031      	beq.n	80035b6 <HAL_GPIO_Init+0x23a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a56      	ldr	r2, [pc, #344]	; (80036b0 <HAL_GPIO_Init+0x334>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d02b      	beq.n	80035b2 <HAL_GPIO_Init+0x236>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a55      	ldr	r2, [pc, #340]	; (80036b4 <HAL_GPIO_Init+0x338>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d025      	beq.n	80035ae <HAL_GPIO_Init+0x232>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a54      	ldr	r2, [pc, #336]	; (80036b8 <HAL_GPIO_Init+0x33c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01f      	beq.n	80035aa <HAL_GPIO_Init+0x22e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a53      	ldr	r2, [pc, #332]	; (80036bc <HAL_GPIO_Init+0x340>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d019      	beq.n	80035a6 <HAL_GPIO_Init+0x22a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a52      	ldr	r2, [pc, #328]	; (80036c0 <HAL_GPIO_Init+0x344>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_GPIO_Init+0x226>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a51      	ldr	r2, [pc, #324]	; (80036c4 <HAL_GPIO_Init+0x348>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00d      	beq.n	800359e <HAL_GPIO_Init+0x222>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a50      	ldr	r2, [pc, #320]	; (80036c8 <HAL_GPIO_Init+0x34c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <HAL_GPIO_Init+0x21e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4f      	ldr	r2, [pc, #316]	; (80036cc <HAL_GPIO_Init+0x350>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_GPIO_Init+0x21a>
 8003592:	2309      	movs	r3, #9
 8003594:	e012      	b.n	80035bc <HAL_GPIO_Init+0x240>
 8003596:	230a      	movs	r3, #10
 8003598:	e010      	b.n	80035bc <HAL_GPIO_Init+0x240>
 800359a:	2308      	movs	r3, #8
 800359c:	e00e      	b.n	80035bc <HAL_GPIO_Init+0x240>
 800359e:	2307      	movs	r3, #7
 80035a0:	e00c      	b.n	80035bc <HAL_GPIO_Init+0x240>
 80035a2:	2306      	movs	r3, #6
 80035a4:	e00a      	b.n	80035bc <HAL_GPIO_Init+0x240>
 80035a6:	2305      	movs	r3, #5
 80035a8:	e008      	b.n	80035bc <HAL_GPIO_Init+0x240>
 80035aa:	2304      	movs	r3, #4
 80035ac:	e006      	b.n	80035bc <HAL_GPIO_Init+0x240>
 80035ae:	2303      	movs	r3, #3
 80035b0:	e004      	b.n	80035bc <HAL_GPIO_Init+0x240>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e002      	b.n	80035bc <HAL_GPIO_Init+0x240>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_GPIO_Init+0x240>
 80035ba:	2300      	movs	r3, #0
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	f002 0203 	and.w	r2, r2, #3
 80035c2:	0092      	lsls	r2, r2, #2
 80035c4:	4093      	lsls	r3, r2
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035cc:	4935      	ldr	r1, [pc, #212]	; (80036a4 <HAL_GPIO_Init+0x328>)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	3302      	adds	r3, #2
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035da:	4b3d      	ldr	r3, [pc, #244]	; (80036d0 <HAL_GPIO_Init+0x354>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035fe:	4a34      	ldr	r2, [pc, #208]	; (80036d0 <HAL_GPIO_Init+0x354>)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003604:	4b32      	ldr	r3, [pc, #200]	; (80036d0 <HAL_GPIO_Init+0x354>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003628:	4a29      	ldr	r2, [pc, #164]	; (80036d0 <HAL_GPIO_Init+0x354>)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800362e:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <HAL_GPIO_Init+0x354>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003652:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <HAL_GPIO_Init+0x354>)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003658:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_GPIO_Init+0x354>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800367c:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <HAL_GPIO_Init+0x354>)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3301      	adds	r3, #1
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b0f      	cmp	r3, #15
 800368c:	f67f ae86 	bls.w	800339c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	3724      	adds	r7, #36	; 0x24
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40020000 	.word	0x40020000
 80036ac:	40020400 	.word	0x40020400
 80036b0:	40020800 	.word	0x40020800
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40021400 	.word	0x40021400
 80036c0:	40021800 	.word	0x40021800
 80036c4:	40021c00 	.word	0x40021c00
 80036c8:	40022000 	.word	0x40022000
 80036cc:	40022400 	.word	0x40022400
 80036d0:	40013c00 	.word	0x40013c00

080036d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	807b      	strh	r3, [r7, #2]
 80036e0:	4613      	mov	r3, r2
 80036e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e4:	787b      	ldrb	r3, [r7, #1]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ea:	887a      	ldrh	r2, [r7, #2]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036f0:	e003      	b.n	80036fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	041a      	lsls	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	619a      	str	r2, [r3, #24]
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d006      	beq.n	800372c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f806 	bl	8003738 <HAL_GPIO_EXTI_Callback>
  }
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40013c00 	.word	0x40013c00

08003738 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e07f      	b.n	8003862 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fe fbce 	bl	8001f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2224      	movs	r2, #36	; 0x24
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	e006      	b.n	80037d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d104      	bne.n	80037ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_I2C_Init+0x11c>)
 80037f6:	430b      	orrs	r3, r1
 80037f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003808:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69d9      	ldr	r1, [r3, #28]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1a      	ldr	r2, [r3, #32]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	02008000 	.word	0x02008000

08003870 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4603      	mov	r3, r0
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	460b      	mov	r3, r1
 8003884:	813b      	strh	r3, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 80f9 	bne.w	8003a8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_I2C_Mem_Write+0x34>
 800389e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0ed      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Mem_Write+0x4e>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e0e6      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038c6:	f7ff f983 	bl	8002bd0 <HAL_GetTick>
 80038ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2319      	movs	r3, #25
 80038d2:	2201      	movs	r2, #1
 80038d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fac3 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0d1      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2221      	movs	r2, #33	; 0x21
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003910:	88f8      	ldrh	r0, [r7, #6]
 8003912:	893a      	ldrh	r2, [r7, #8]
 8003914:	8979      	ldrh	r1, [r7, #10]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	4603      	mov	r3, r0
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f9d3 	bl	8003ccc <I2C_RequestMemoryWrite>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0a9      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2bff      	cmp	r3, #255	; 0xff
 8003940:	d90e      	bls.n	8003960 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	22ff      	movs	r2, #255	; 0xff
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	b2da      	uxtb	r2, r3
 800394e:	8979      	ldrh	r1, [r7, #10]
 8003950:	2300      	movs	r3, #0
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fc1f 	bl	800419c <I2C_TransferConfig>
 800395e:	e00f      	b.n	8003980 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	b2da      	uxtb	r2, r3
 8003970:	8979      	ldrh	r1, [r7, #10]
 8003972:	2300      	movs	r3, #0
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fc0e 	bl	800419c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 faad 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e07b      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d034      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x1c8>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d130      	bne.n	8003a38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	2200      	movs	r2, #0
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fa3f 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e04d      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2bff      	cmp	r3, #255	; 0xff
 80039f8:	d90e      	bls.n	8003a18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	22ff      	movs	r2, #255	; 0xff
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	8979      	ldrh	r1, [r7, #10]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fbc3 	bl	800419c <I2C_TransferConfig>
 8003a16:	e00f      	b.n	8003a38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	8979      	ldrh	r1, [r7, #10]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fbb2 	bl	800419c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d19e      	bne.n	8003980 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fa8c 	bl	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e01a      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_I2C_Mem_Write+0x224>)
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	fe00e800 	.word	0xfe00e800

08003a98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	817b      	strh	r3, [r7, #10]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	813b      	strh	r3, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	f040 80fd 	bne.w	8003cba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_I2C_Mem_Read+0x34>
 8003ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0f1      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2C_Mem_Read+0x4e>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e0ea      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003aee:	f7ff f86f 	bl	8002bd0 <HAL_GetTick>
 8003af2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2319      	movs	r3, #25
 8003afa:	2201      	movs	r2, #1
 8003afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f9af 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0d5      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2222      	movs	r2, #34	; 0x22
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2240      	movs	r2, #64	; 0x40
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b38:	88f8      	ldrh	r0, [r7, #6]
 8003b3a:	893a      	ldrh	r2, [r7, #8]
 8003b3c:	8979      	ldrh	r1, [r7, #10]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	4603      	mov	r3, r0
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f913 	bl	8003d74 <I2C_RequestMemoryRead>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0ad      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2bff      	cmp	r3, #255	; 0xff
 8003b68:	d90e      	bls.n	8003b88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	22ff      	movs	r2, #255	; 0xff
 8003b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	8979      	ldrh	r1, [r7, #10]
 8003b78:	4b52      	ldr	r3, [pc, #328]	; (8003cc4 <HAL_I2C_Mem_Read+0x22c>)
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fb0b 	bl	800419c <I2C_TransferConfig>
 8003b86:	e00f      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	8979      	ldrh	r1, [r7, #10]
 8003b9a:	4b4a      	ldr	r3, [pc, #296]	; (8003cc4 <HAL_I2C_Mem_Read+0x22c>)
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fafa 	bl	800419c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2104      	movs	r1, #4
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f956 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e07c      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d034      	beq.n	8003c68 <HAL_I2C_Mem_Read+0x1d0>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d130      	bne.n	8003c68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2180      	movs	r1, #128	; 0x80
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f927 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e04d      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2bff      	cmp	r3, #255	; 0xff
 8003c28:	d90e      	bls.n	8003c48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	22ff      	movs	r2, #255	; 0xff
 8003c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	8979      	ldrh	r1, [r7, #10]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 faab 	bl	800419c <I2C_TransferConfig>
 8003c46:	e00f      	b.n	8003c68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	8979      	ldrh	r1, [r7, #10]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fa9a 	bl	800419c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d19a      	bne.n	8003ba8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f974 	bl	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e01a      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_I2C_Mem_Read+0x230>)
 8003c9a:	400b      	ands	r3, r1
 8003c9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e000      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
  }
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	80002400 	.word	0x80002400
 8003cc8:	fe00e800 	.word	0xfe00e800

08003ccc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	817b      	strh	r3, [r7, #10]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	813b      	strh	r3, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	8979      	ldrh	r1, [r7, #10]
 8003cec:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <I2C_RequestMemoryWrite+0xa4>)
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fa51 	bl	800419c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	69b9      	ldr	r1, [r7, #24]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f8f0 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e02c      	b.n	8003d68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d105      	bne.n	8003d20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d14:	893b      	ldrh	r3, [r7, #8]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d1e:	e015      	b.n	8003d4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d20:	893b      	ldrh	r3, [r7, #8]
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	69b9      	ldr	r1, [r7, #24]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f8d6 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e012      	b.n	8003d68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d42:	893b      	ldrh	r3, [r7, #8]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2200      	movs	r2, #0
 8003d54:	2180      	movs	r1, #128	; 0x80
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f884 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	80002000 	.word	0x80002000

08003d74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	817b      	strh	r3, [r7, #10]
 8003d86:	460b      	mov	r3, r1
 8003d88:	813b      	strh	r3, [r7, #8]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	8979      	ldrh	r1, [r7, #10]
 8003d94:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <I2C_RequestMemoryRead+0xa4>)
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f9fe 	bl	800419c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f89d 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e02c      	b.n	8003e0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d105      	bne.n	8003dc6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dba:	893b      	ldrh	r3, [r7, #8]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc4:	e015      	b.n	8003df2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dc6:	893b      	ldrh	r3, [r7, #8]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	69b9      	ldr	r1, [r7, #24]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f883 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e012      	b.n	8003e0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003de8:	893b      	ldrh	r3, [r7, #8]
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2140      	movs	r1, #64	; 0x40
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f831 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	80002000 	.word	0x80002000

08003e1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d103      	bne.n	8003e3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d007      	beq.n	8003e58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	619a      	str	r2, [r3, #24]
  }
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	4613      	mov	r3, r2
 8003e72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e74:	e022      	b.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7c:	d01e      	beq.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7e:	f7fe fea7 	bl	8002bd0 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d302      	bcc.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d113      	bne.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	f043 0220 	orr.w	r2, r3, #32
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e00f      	b.n	8003edc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d0cd      	beq.n	8003e76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef0:	e02c      	b.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f870 	bl	8003fdc <I2C_IsErrorOccurred>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e02a      	b.n	8003f5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f0c:	d01e      	beq.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fe fe5f 	bl	8002bd0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d113      	bne.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e007      	b.n	8003f5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d1cb      	bne.n	8003ef2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f70:	e028      	b.n	8003fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f830 	bl	8003fdc <I2C_IsErrorOccurred>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e026      	b.n	8003fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7fe fe23 	bl	8002bd0 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d113      	bne.n	8003fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e007      	b.n	8003fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d1cf      	bne.n	8003f72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d068      	beq.n	80040da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2210      	movs	r2, #16
 800400e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004010:	e049      	b.n	80040a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004018:	d045      	beq.n	80040a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7fe fdd9 	bl	8002bd0 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <I2C_IsErrorOccurred+0x54>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d13a      	bne.n	80040a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004042:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800404e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004052:	d121      	bne.n	8004098 <I2C_IsErrorOccurred+0xbc>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800405a:	d01d      	beq.n	8004098 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b20      	cmp	r3, #32
 8004060:	d01a      	beq.n	8004098 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004070:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004072:	f7fe fdad 	bl	8002bd0 <HAL_GetTick>
 8004076:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004078:	e00e      	b.n	8004098 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800407a:	f7fe fda9 	bl	8002bd0 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b19      	cmp	r3, #25
 8004086:	d907      	bls.n	8004098 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f043 0320 	orr.w	r3, r3, #32
 800408e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004096:	e006      	b.n	80040a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d1e9      	bne.n	800407a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d003      	beq.n	80040bc <I2C_IsErrorOccurred+0xe0>
 80040b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0aa      	beq.n	8004012 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d103      	bne.n	80040cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2220      	movs	r2, #32
 80040ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00b      	beq.n	8004104 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	f043 0308 	orr.w	r3, r3, #8
 8004114:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800411e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00b      	beq.n	8004148 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	f043 0302 	orr.w	r3, r3, #2
 8004136:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004140:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01c      	beq.n	800418a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fe63 	bl	8003e1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6859      	ldr	r1, [r3, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <I2C_IsErrorOccurred+0x1bc>)
 8004162:	400b      	ands	r3, r1
 8004164:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800418a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800418e:	4618      	mov	r0, r3
 8004190:	3728      	adds	r7, #40	; 0x28
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	fe00e800 	.word	0xfe00e800

0800419c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	817b      	strh	r3, [r7, #10]
 80041aa:	4613      	mov	r3, r2
 80041ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041ae:	897b      	ldrh	r3, [r7, #10]
 80041b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041b4:	7a7b      	ldrb	r3, [r7, #9]
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	0d5b      	lsrs	r3, r3, #21
 80041d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <I2C_TransferConfig+0x60>)
 80041dc:	430b      	orrs	r3, r1
 80041de:	43db      	mvns	r3, r3
 80041e0:	ea02 0103 	and.w	r1, r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	03ff63ff 	.word	0x03ff63ff

08004200 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b20      	cmp	r3, #32
 8004214:	d138      	bne.n	8004288 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004220:	2302      	movs	r3, #2
 8004222:	e032      	b.n	800428a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2224      	movs	r2, #36	; 0x24
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004252:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d139      	bne.n	8004320 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e033      	b.n	8004322 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2224      	movs	r2, #36	; 0x24
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a04      	ldr	r2, [pc, #16]	; (800434c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800433a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433e:	6013      	str	r3, [r2, #0]
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40007000 	.word	0x40007000

08004350 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800435a:	4b23      	ldr	r3, [pc, #140]	; (80043e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	4a22      	ldr	r2, [pc, #136]	; (80043e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004364:	6413      	str	r3, [r2, #64]	; 0x40
 8004366:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004372:	4b1e      	ldr	r3, [pc, #120]	; (80043ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800437e:	f7fe fc27 	bl	8002bd0 <HAL_GetTick>
 8004382:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004384:	e009      	b.n	800439a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004386:	f7fe fc23 	bl	8002bd0 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004394:	d901      	bls.n	800439a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e022      	b.n	80043e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800439a:	4b14      	ldr	r3, [pc, #80]	; (80043ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a6:	d1ee      	bne.n	8004386 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043a8:	4b10      	ldr	r3, [pc, #64]	; (80043ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0f      	ldr	r2, [pc, #60]	; (80043ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80043ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043b4:	f7fe fc0c 	bl	8002bd0 <HAL_GetTick>
 80043b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043ba:	e009      	b.n	80043d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043bc:	f7fe fc08 	bl	8002bd0 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ca:	d901      	bls.n	80043d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e007      	b.n	80043e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043dc:	d1ee      	bne.n	80043bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40007000 	.word	0x40007000

080043f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80043f8:	2300      	movs	r3, #0
 80043fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e29b      	b.n	800493e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 8087 	beq.w	8004522 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004414:	4b96      	ldr	r3, [pc, #600]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 030c 	and.w	r3, r3, #12
 800441c:	2b04      	cmp	r3, #4
 800441e:	d00c      	beq.n	800443a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004420:	4b93      	ldr	r3, [pc, #588]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b08      	cmp	r3, #8
 800442a:	d112      	bne.n	8004452 <HAL_RCC_OscConfig+0x62>
 800442c:	4b90      	ldr	r3, [pc, #576]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004438:	d10b      	bne.n	8004452 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443a:	4b8d      	ldr	r3, [pc, #564]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d06c      	beq.n	8004520 <HAL_RCC_OscConfig+0x130>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d168      	bne.n	8004520 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e275      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445a:	d106      	bne.n	800446a <HAL_RCC_OscConfig+0x7a>
 800445c:	4b84      	ldr	r3, [pc, #528]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a83      	ldr	r2, [pc, #524]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	e02e      	b.n	80044c8 <HAL_RCC_OscConfig+0xd8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10c      	bne.n	800448c <HAL_RCC_OscConfig+0x9c>
 8004472:	4b7f      	ldr	r3, [pc, #508]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a7e      	ldr	r2, [pc, #504]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4b7c      	ldr	r3, [pc, #496]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a7b      	ldr	r2, [pc, #492]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	e01d      	b.n	80044c8 <HAL_RCC_OscConfig+0xd8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004494:	d10c      	bne.n	80044b0 <HAL_RCC_OscConfig+0xc0>
 8004496:	4b76      	ldr	r3, [pc, #472]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a75      	ldr	r2, [pc, #468]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 800449c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4b73      	ldr	r3, [pc, #460]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a72      	ldr	r2, [pc, #456]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80044a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e00b      	b.n	80044c8 <HAL_RCC_OscConfig+0xd8>
 80044b0:	4b6f      	ldr	r3, [pc, #444]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a6e      	ldr	r2, [pc, #440]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80044b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	4b6c      	ldr	r3, [pc, #432]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a6b      	ldr	r2, [pc, #428]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80044c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d013      	beq.n	80044f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fe fb7e 	bl	8002bd0 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fe fb7a 	bl	8002bd0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e229      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	4b61      	ldr	r3, [pc, #388]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0xe8>
 80044f6:	e014      	b.n	8004522 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fe fb6a 	bl	8002bd0 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004500:	f7fe fb66 	bl	8002bd0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e215      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	4b57      	ldr	r3, [pc, #348]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x110>
 800451e:	e000      	b.n	8004522 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d069      	beq.n	8004602 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800452e:	4b50      	ldr	r3, [pc, #320]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453a:	4b4d      	ldr	r3, [pc, #308]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b08      	cmp	r3, #8
 8004544:	d11c      	bne.n	8004580 <HAL_RCC_OscConfig+0x190>
 8004546:	4b4a      	ldr	r3, [pc, #296]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d116      	bne.n	8004580 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004552:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_RCC_OscConfig+0x17a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d001      	beq.n	800456a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e1e9      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456a:	4b41      	ldr	r3, [pc, #260]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	493d      	ldr	r1, [pc, #244]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 800457a:	4313      	orrs	r3, r2
 800457c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457e:	e040      	b.n	8004602 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d023      	beq.n	80045d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004588:	4b39      	ldr	r3, [pc, #228]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a38      	ldr	r2, [pc, #224]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fe fb1c 	bl	8002bd0 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800459c:	f7fe fb18 	bl	8002bd0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e1c7      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ae:	4b30      	ldr	r3, [pc, #192]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ba:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4929      	ldr	r1, [pc, #164]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]
 80045ce:	e018      	b.n	8004602 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d0:	4b27      	ldr	r3, [pc, #156]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a26      	ldr	r2, [pc, #152]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fe faf8 	bl	8002bd0 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e4:	f7fe faf4 	bl	8002bd0 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e1a3      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d038      	beq.n	8004680 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d019      	beq.n	800464a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004616:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461a:	4a15      	ldr	r2, [pc, #84]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004622:	f7fe fad5 	bl	8002bd0 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462a:	f7fe fad1 	bl	8002bd0 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e180      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 800463e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <HAL_RCC_OscConfig+0x23a>
 8004648:	e01a      	b.n	8004680 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 800464c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464e:	4a08      	ldr	r2, [pc, #32]	; (8004670 <HAL_RCC_OscConfig+0x280>)
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004656:	f7fe fabb 	bl	8002bd0 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465c:	e00a      	b.n	8004674 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465e:	f7fe fab7 	bl	8002bd0 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d903      	bls.n	8004674 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e166      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
 8004670:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004674:	4b92      	ldr	r3, [pc, #584]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1ee      	bne.n	800465e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80a4 	beq.w	80047d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468e:	4b8c      	ldr	r3, [pc, #560]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10d      	bne.n	80046b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800469a:	4b89      	ldr	r3, [pc, #548]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	4a88      	ldr	r2, [pc, #544]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 80046a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a4:	6413      	str	r3, [r2, #64]	; 0x40
 80046a6:	4b86      	ldr	r3, [pc, #536]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b6:	4b83      	ldr	r3, [pc, #524]	; (80048c4 <HAL_RCC_OscConfig+0x4d4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d118      	bne.n	80046f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046c2:	4b80      	ldr	r3, [pc, #512]	; (80048c4 <HAL_RCC_OscConfig+0x4d4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a7f      	ldr	r2, [pc, #508]	; (80048c4 <HAL_RCC_OscConfig+0x4d4>)
 80046c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ce:	f7fe fa7f 	bl	8002bd0 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d6:	f7fe fa7b 	bl	8002bd0 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b64      	cmp	r3, #100	; 0x64
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e12a      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e8:	4b76      	ldr	r3, [pc, #472]	; (80048c4 <HAL_RCC_OscConfig+0x4d4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d106      	bne.n	800470a <HAL_RCC_OscConfig+0x31a>
 80046fc:	4b70      	ldr	r3, [pc, #448]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a6f      	ldr	r2, [pc, #444]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
 8004708:	e02d      	b.n	8004766 <HAL_RCC_OscConfig+0x376>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10c      	bne.n	800472c <HAL_RCC_OscConfig+0x33c>
 8004712:	4b6b      	ldr	r3, [pc, #428]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	4a6a      	ldr	r2, [pc, #424]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	6713      	str	r3, [r2, #112]	; 0x70
 800471e:	4b68      	ldr	r3, [pc, #416]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	4a67      	ldr	r2, [pc, #412]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004724:	f023 0304 	bic.w	r3, r3, #4
 8004728:	6713      	str	r3, [r2, #112]	; 0x70
 800472a:	e01c      	b.n	8004766 <HAL_RCC_OscConfig+0x376>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b05      	cmp	r3, #5
 8004732:	d10c      	bne.n	800474e <HAL_RCC_OscConfig+0x35e>
 8004734:	4b62      	ldr	r3, [pc, #392]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	4a61      	ldr	r2, [pc, #388]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 800473a:	f043 0304 	orr.w	r3, r3, #4
 800473e:	6713      	str	r3, [r2, #112]	; 0x70
 8004740:	4b5f      	ldr	r3, [pc, #380]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	4a5e      	ldr	r2, [pc, #376]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6713      	str	r3, [r2, #112]	; 0x70
 800474c:	e00b      	b.n	8004766 <HAL_RCC_OscConfig+0x376>
 800474e:	4b5c      	ldr	r3, [pc, #368]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	4a5b      	ldr	r2, [pc, #364]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	6713      	str	r3, [r2, #112]	; 0x70
 800475a:	4b59      	ldr	r3, [pc, #356]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	4a58      	ldr	r2, [pc, #352]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004760:	f023 0304 	bic.w	r3, r3, #4
 8004764:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d015      	beq.n	800479a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476e:	f7fe fa2f 	bl	8002bd0 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004774:	e00a      	b.n	800478c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004776:	f7fe fa2b 	bl	8002bd0 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f241 3288 	movw	r2, #5000	; 0x1388
 8004784:	4293      	cmp	r3, r2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e0d8      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478c:	4b4c      	ldr	r3, [pc, #304]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0ee      	beq.n	8004776 <HAL_RCC_OscConfig+0x386>
 8004798:	e014      	b.n	80047c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fe fa19 	bl	8002bd0 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a0:	e00a      	b.n	80047b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a2:	f7fe fa15 	bl	8002bd0 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e0c2      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b8:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1ee      	bne.n	80047a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d105      	bne.n	80047d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ca:	4b3d      	ldr	r3, [pc, #244]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	4a3c      	ldr	r2, [pc, #240]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 80047d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80ae 	beq.w	800493c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e0:	4b37      	ldr	r3, [pc, #220]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 030c 	and.w	r3, r3, #12
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d06d      	beq.n	80048c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d14b      	bne.n	800488c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f4:	4b32      	ldr	r3, [pc, #200]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a31      	ldr	r2, [pc, #196]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 80047fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fe f9e6 	bl	8002bd0 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004808:	f7fe f9e2 	bl	8002bd0 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e091      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481a:	4b29      	ldr	r3, [pc, #164]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f0      	bne.n	8004808 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69da      	ldr	r2, [r3, #28]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	019b      	lsls	r3, r3, #6
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	085b      	lsrs	r3, r3, #1
 800483e:	3b01      	subs	r3, #1
 8004840:	041b      	lsls	r3, r3, #16
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	061b      	lsls	r3, r3, #24
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	071b      	lsls	r3, r3, #28
 8004852:	491b      	ldr	r1, [pc, #108]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004858:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 800485e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fe f9b4 	bl	8002bd0 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486c:	f7fe f9b0 	bl	8002bd0 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e05f      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487e:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x47c>
 800488a:	e057      	b.n	800493c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488c:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0b      	ldr	r2, [pc, #44]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 8004892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fe f99a 	bl	8002bd0 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fe f996 	bl	8002bd0 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e045      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b2:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <HAL_RCC_OscConfig+0x4d0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x4b0>
 80048be:	e03d      	b.n	800493c <HAL_RCC_OscConfig+0x54c>
 80048c0:	40023800 	.word	0x40023800
 80048c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048c8:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <HAL_RCC_OscConfig+0x558>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d030      	beq.n	8004938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d129      	bne.n	8004938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d122      	bne.n	8004938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004900:	4293      	cmp	r3, r2
 8004902:	d119      	bne.n	8004938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	3b01      	subs	r3, #1
 8004912:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d10f      	bne.n	8004938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d107      	bne.n	8004938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800

0800494c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0d0      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004964:	4b6a      	ldr	r3, [pc, #424]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d910      	bls.n	8004994 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 020f 	bic.w	r2, r3, #15
 800497a:	4965      	ldr	r1, [pc, #404]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b63      	ldr	r3, [pc, #396]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0b8      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ac:	4b59      	ldr	r3, [pc, #356]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a58      	ldr	r2, [pc, #352]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c4:	4b53      	ldr	r3, [pc, #332]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a52      	ldr	r2, [pc, #328]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d0:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	494d      	ldr	r1, [pc, #308]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d040      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d115      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e07f      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0e:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e073      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	4b3d      	ldr	r3, [pc, #244]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e06b      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2e:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4936      	ldr	r1, [pc, #216]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fe f8c6 	bl	8002bd0 <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a48:	f7fe f8c2 	bl	8002bd0 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e053      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 020c 	and.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1eb      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d210      	bcs.n	8004aa0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 020f 	bic.w	r2, r3, #15
 8004a86:	4922      	ldr	r1, [pc, #136]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e032      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4916      	ldr	r1, [pc, #88]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	490e      	ldr	r1, [pc, #56]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ade:	f000 f821 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	490a      	ldr	r1, [pc, #40]	; (8004b18 <HAL_RCC_ClockConfig+0x1cc>)
 8004af0:	5ccb      	ldrb	r3, [r1, r3]
 8004af2:	fa22 f303 	lsr.w	r3, r2, r3
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <HAL_RCC_ClockConfig+0x1d0>)
 8004af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004afa:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <HAL_RCC_ClockConfig+0x1d4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe f822 	bl	8002b48 <HAL_InitTick>

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023c00 	.word	0x40023c00
 8004b14:	40023800 	.word	0x40023800
 8004b18:	080077e0 	.word	0x080077e0
 8004b1c:	20000000 	.word	0x20000000
 8004b20:	20000004 	.word	0x20000004

08004b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b28:	b094      	sub	sp, #80	; 0x50
 8004b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b30:	2300      	movs	r3, #0
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b34:	2300      	movs	r3, #0
 8004b36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b3c:	4b79      	ldr	r3, [pc, #484]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d00d      	beq.n	8004b64 <HAL_RCC_GetSysClockFreq+0x40>
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	f200 80e1 	bhi.w	8004d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0x34>
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d003      	beq.n	8004b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b56:	e0db      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b58:	4b73      	ldr	r3, [pc, #460]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b5c:	e0db      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b5e:	4b73      	ldr	r3, [pc, #460]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8004b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b62:	e0d8      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b64:	4b6f      	ldr	r3, [pc, #444]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b6c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d063      	beq.n	8004c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7a:	4b6a      	ldr	r3, [pc, #424]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	099b      	lsrs	r3, r3, #6
 8004b80:	2200      	movs	r2, #0
 8004b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b8e:	2300      	movs	r3, #0
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
 8004b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b96:	4622      	mov	r2, r4
 8004b98:	462b      	mov	r3, r5
 8004b9a:	f04f 0000 	mov.w	r0, #0
 8004b9e:	f04f 0100 	mov.w	r1, #0
 8004ba2:	0159      	lsls	r1, r3, #5
 8004ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba8:	0150      	lsls	r0, r2, #5
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4621      	mov	r1, r4
 8004bb0:	1a51      	subs	r1, r2, r1
 8004bb2:	6139      	str	r1, [r7, #16]
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bc8:	4659      	mov	r1, fp
 8004bca:	018b      	lsls	r3, r1, #6
 8004bcc:	4651      	mov	r1, sl
 8004bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bd2:	4651      	mov	r1, sl
 8004bd4:	018a      	lsls	r2, r1, #6
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8004bdc:	4659      	mov	r1, fp
 8004bde:	eb63 0901 	sbc.w	r9, r3, r1
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bf6:	4690      	mov	r8, r2
 8004bf8:	4699      	mov	r9, r3
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	eb18 0303 	adds.w	r3, r8, r3
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	462b      	mov	r3, r5
 8004c04:	eb49 0303 	adc.w	r3, r9, r3
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c16:	4629      	mov	r1, r5
 8004c18:	024b      	lsls	r3, r1, #9
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c20:	4621      	mov	r1, r4
 8004c22:	024a      	lsls	r2, r1, #9
 8004c24:	4610      	mov	r0, r2
 8004c26:	4619      	mov	r1, r3
 8004c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c34:	f7fb fb00 	bl	8000238 <__aeabi_uldivmod>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c40:	e058      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c42:	4b38      	ldr	r3, [pc, #224]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	2200      	movs	r2, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c52:	623b      	str	r3, [r7, #32]
 8004c54:	2300      	movs	r3, #0
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
 8004c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	464b      	mov	r3, r9
 8004c60:	f04f 0000 	mov.w	r0, #0
 8004c64:	f04f 0100 	mov.w	r1, #0
 8004c68:	0159      	lsls	r1, r3, #5
 8004c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c6e:	0150      	lsls	r0, r2, #5
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4641      	mov	r1, r8
 8004c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c94:	ebb2 040a 	subs.w	r4, r2, sl
 8004c98:	eb63 050b 	sbc.w	r5, r3, fp
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	00eb      	lsls	r3, r5, #3
 8004ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004caa:	00e2      	lsls	r2, r4, #3
 8004cac:	4614      	mov	r4, r2
 8004cae:	461d      	mov	r5, r3
 8004cb0:	4643      	mov	r3, r8
 8004cb2:	18e3      	adds	r3, r4, r3
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	eb45 0303 	adc.w	r3, r5, r3
 8004cbc:	607b      	str	r3, [r7, #4]
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cca:	4629      	mov	r1, r5
 8004ccc:	028b      	lsls	r3, r1, #10
 8004cce:	4621      	mov	r1, r4
 8004cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	028a      	lsls	r2, r1, #10
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cde:	2200      	movs	r2, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	61fa      	str	r2, [r7, #28]
 8004ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce8:	f7fb faa6 	bl	8000238 <__aeabi_uldivmod>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	0c1b      	lsrs	r3, r3, #16
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	3301      	adds	r3, #1
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d0e:	e002      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3750      	adds	r7, #80	; 0x50
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d22:	bf00      	nop
 8004d24:	40023800 	.word	0x40023800
 8004d28:	00f42400 	.word	0x00f42400
 8004d2c:	007a1200 	.word	0x007a1200

08004d30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d36:	681b      	ldr	r3, [r3, #0]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20000000 	.word	0x20000000

08004d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d4c:	f7ff fff0 	bl	8004d30 <HAL_RCC_GetHCLKFreq>
 8004d50:	4602      	mov	r2, r0
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	0a9b      	lsrs	r3, r3, #10
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	4903      	ldr	r1, [pc, #12]	; (8004d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d5e:	5ccb      	ldrb	r3, [r1, r3]
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	080077f0 	.word	0x080077f0

08004d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d74:	f7ff ffdc 	bl	8004d30 <HAL_RCC_GetHCLKFreq>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	0b5b      	lsrs	r3, r3, #13
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	4903      	ldr	r1, [pc, #12]	; (8004d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d86:	5ccb      	ldrb	r3, [r1, r3]
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40023800 	.word	0x40023800
 8004d94:	080077f0 	.word	0x080077f0

08004d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d012      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dc0:	4b69      	ldr	r3, [pc, #420]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a68      	ldr	r2, [pc, #416]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dca:	6093      	str	r3, [r2, #8]
 8004dcc:	4b66      	ldr	r3, [pc, #408]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd4:	4964      	ldr	r1, [pc, #400]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004de2:	2301      	movs	r3, #1
 8004de4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d017      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004df2:	4b5d      	ldr	r3, [pc, #372]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e00:	4959      	ldr	r1, [pc, #356]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e10:	d101      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e12:	2301      	movs	r3, #1
 8004e14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d017      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e2e:	4b4e      	ldr	r3, [pc, #312]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	494a      	ldr	r1, [pc, #296]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 808b 	beq.w	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e7c:	4b3a      	ldr	r3, [pc, #232]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	4a39      	ldr	r2, [pc, #228]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e86:	6413      	str	r3, [r2, #64]	; 0x40
 8004e88:	4b37      	ldr	r3, [pc, #220]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e94:	4b35      	ldr	r3, [pc, #212]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a34      	ldr	r2, [pc, #208]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea0:	f7fd fe96 	bl	8002bd0 <HAL_GetTick>
 8004ea4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea8:	f7fd fe92 	bl	8002bd0 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	; 0x64
 8004eb4:	d901      	bls.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e38f      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eba:	4b2c      	ldr	r3, [pc, #176]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ec6:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d035      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d02e      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ee4:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eee:	4b1e      	ldr	r3, [pc, #120]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef2:	4a1d      	ldr	r2, [pc, #116]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	4a1a      	ldr	r2, [pc, #104]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f0c:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d114      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fd fe5a 	bl	8002bd0 <HAL_GetTick>
 8004f1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f20:	f7fd fe56 	bl	8002bd0 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e351      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0ee      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f4e:	d111      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f5c:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f5e:	400b      	ands	r3, r1
 8004f60:	4901      	ldr	r1, [pc, #4]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
 8004f66:	e00b      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	40007000 	.word	0x40007000
 8004f70:	0ffffcff 	.word	0x0ffffcff
 8004f74:	4bac      	ldr	r3, [pc, #688]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4aab      	ldr	r2, [pc, #684]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f7e:	6093      	str	r3, [r2, #8]
 8004f80:	4ba9      	ldr	r3, [pc, #676]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8c:	49a6      	ldr	r1, [pc, #664]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d010      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f9e:	4ba2      	ldr	r3, [pc, #648]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa4:	4aa0      	ldr	r2, [pc, #640]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004faa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fae:	4b9e      	ldr	r3, [pc, #632]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	499b      	ldr	r1, [pc, #620]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fcc:	4b96      	ldr	r3, [pc, #600]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fda:	4993      	ldr	r1, [pc, #588]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fee:	4b8e      	ldr	r3, [pc, #568]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ffc:	498a      	ldr	r1, [pc, #552]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005010:	4b85      	ldr	r3, [pc, #532]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005016:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800501e:	4982      	ldr	r1, [pc, #520]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005032:	4b7d      	ldr	r3, [pc, #500]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005038:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	4979      	ldr	r1, [pc, #484]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005054:	4b74      	ldr	r3, [pc, #464]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505a:	f023 0203 	bic.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	4971      	ldr	r1, [pc, #452]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005076:	4b6c      	ldr	r3, [pc, #432]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507c:	f023 020c 	bic.w	r2, r3, #12
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005084:	4968      	ldr	r1, [pc, #416]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005098:	4b63      	ldr	r3, [pc, #396]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a6:	4960      	ldr	r1, [pc, #384]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050ba:	4b5b      	ldr	r3, [pc, #364]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c8:	4957      	ldr	r1, [pc, #348]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050dc:	4b52      	ldr	r3, [pc, #328]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	494f      	ldr	r1, [pc, #316]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050fe:	4b4a      	ldr	r3, [pc, #296]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005104:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	4946      	ldr	r1, [pc, #280]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005120:	4b41      	ldr	r3, [pc, #260]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005126:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512e:	493e      	ldr	r1, [pc, #248]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005142:	4b39      	ldr	r3, [pc, #228]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005148:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005150:	4935      	ldr	r1, [pc, #212]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005164:	4b30      	ldr	r3, [pc, #192]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005172:	492d      	ldr	r1, [pc, #180]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d011      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005186:	4b28      	ldr	r3, [pc, #160]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005194:	4924      	ldr	r1, [pc, #144]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a4:	d101      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051a6:	2301      	movs	r3, #1
 80051a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051b6:	2301      	movs	r3, #1
 80051b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051c6:	4b18      	ldr	r3, [pc, #96]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d4:	4914      	ldr	r1, [pc, #80]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051e8:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051f8:	490b      	ldr	r1, [pc, #44]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00f      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800520c:	4b06      	ldr	r3, [pc, #24]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521c:	4902      	ldr	r1, [pc, #8]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005224:	e002      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00b      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005238:	4b8a      	ldr	r3, [pc, #552]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	4986      	ldr	r1, [pc, #536]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00b      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800525c:	4b81      	ldr	r3, [pc, #516]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800525e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005262:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526c:	497d      	ldr	r1, [pc, #500]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d006      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 80d6 	beq.w	8005434 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005288:	4b76      	ldr	r3, [pc, #472]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a75      	ldr	r2, [pc, #468]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800528e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005294:	f7fd fc9c 	bl	8002bd0 <HAL_GetTick>
 8005298:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800529c:	f7fd fc98 	bl	8002bd0 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b64      	cmp	r3, #100	; 0x64
 80052a8:	d901      	bls.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e195      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052ae:	4b6d      	ldr	r3, [pc, #436]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d021      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d11d      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052ce:	4b65      	ldr	r3, [pc, #404]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052dc:	4b61      	ldr	r3, [pc, #388]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e2:	0e1b      	lsrs	r3, r3, #24
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	019a      	lsls	r2, r3, #6
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	431a      	orrs	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	061b      	lsls	r3, r3, #24
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	071b      	lsls	r3, r3, #28
 8005302:	4958      	ldr	r1, [pc, #352]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800531e:	d00a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02e      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005334:	d129      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005336:	4b4b      	ldr	r3, [pc, #300]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005344:	4b47      	ldr	r3, [pc, #284]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534a:	0f1b      	lsrs	r3, r3, #28
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	019a      	lsls	r2, r3, #6
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	041b      	lsls	r3, r3, #16
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	061b      	lsls	r3, r3, #24
 8005364:	431a      	orrs	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	071b      	lsls	r3, r3, #28
 800536a:	493e      	ldr	r1, [pc, #248]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005372:	4b3c      	ldr	r3, [pc, #240]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005378:	f023 021f 	bic.w	r2, r3, #31
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	3b01      	subs	r3, #1
 8005382:	4938      	ldr	r1, [pc, #224]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d01d      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005396:	4b33      	ldr	r3, [pc, #204]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539c:	0e1b      	lsrs	r3, r3, #24
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053a4:	4b2f      	ldr	r3, [pc, #188]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053aa:	0f1b      	lsrs	r3, r3, #28
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	019a      	lsls	r2, r3, #6
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	431a      	orrs	r2, r3
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	061b      	lsls	r3, r3, #24
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	071b      	lsls	r3, r3, #28
 80053ca:	4926      	ldr	r1, [pc, #152]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d011      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	019a      	lsls	r2, r3, #6
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	041b      	lsls	r3, r3, #16
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	061b      	lsls	r3, r3, #24
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	071b      	lsls	r3, r3, #28
 80053fa:	491a      	ldr	r1, [pc, #104]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005402:	4b18      	ldr	r3, [pc, #96]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a17      	ldr	r2, [pc, #92]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005408:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800540c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540e:	f7fd fbdf 	bl	8002bd0 <HAL_GetTick>
 8005412:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005416:	f7fd fbdb 	bl	8002bd0 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b64      	cmp	r3, #100	; 0x64
 8005422:	d901      	bls.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e0d8      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005428:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2b01      	cmp	r3, #1
 8005438:	f040 80ce 	bne.w	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800543c:	4b09      	ldr	r3, [pc, #36]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a08      	ldr	r2, [pc, #32]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005448:	f7fd fbc2 	bl	8002bd0 <HAL_GetTick>
 800544c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800544e:	e00b      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005450:	f7fd fbbe 	bl	8002bd0 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b64      	cmp	r3, #100	; 0x64
 800545c:	d904      	bls.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e0bb      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005462:	bf00      	nop
 8005464:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005468:	4b5e      	ldr	r3, [pc, #376]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005474:	d0ec      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005492:	2b00      	cmp	r3, #0
 8005494:	d02e      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d12a      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800549e:	4b51      	ldr	r3, [pc, #324]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054ac:	4b4d      	ldr	r3, [pc, #308]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b2:	0f1b      	lsrs	r3, r3, #28
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	019a      	lsls	r2, r3, #6
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	041b      	lsls	r3, r3, #16
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	061b      	lsls	r3, r3, #24
 80054cc:	431a      	orrs	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	071b      	lsls	r3, r3, #28
 80054d2:	4944      	ldr	r1, [pc, #272]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054da:	4b42      	ldr	r3, [pc, #264]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	3b01      	subs	r3, #1
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	493d      	ldr	r1, [pc, #244]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d022      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005508:	d11d      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800550a:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	0e1b      	lsrs	r3, r3, #24
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005518:	4b32      	ldr	r3, [pc, #200]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551e:	0f1b      	lsrs	r3, r3, #28
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	019a      	lsls	r2, r3, #6
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	431a      	orrs	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	061b      	lsls	r3, r3, #24
 8005538:	431a      	orrs	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	071b      	lsls	r3, r3, #28
 800553e:	4929      	ldr	r1, [pc, #164]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d028      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005552:	4b24      	ldr	r3, [pc, #144]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	0e1b      	lsrs	r3, r3, #24
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005560:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	0c1b      	lsrs	r3, r3, #16
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	019a      	lsls	r2, r3, #6
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	431a      	orrs	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	061b      	lsls	r3, r3, #24
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	071b      	lsls	r3, r3, #28
 8005586:	4917      	ldr	r1, [pc, #92]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800558e:	4b15      	ldr	r3, [pc, #84]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	4911      	ldr	r1, [pc, #68]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055a4:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a0e      	ldr	r2, [pc, #56]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b0:	f7fd fb0e 	bl	8002bd0 <HAL_GetTick>
 80055b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055b6:	e008      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055b8:	f7fd fb0a 	bl	8002bd0 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b64      	cmp	r3, #100	; 0x64
 80055c4:	d901      	bls.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e007      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d6:	d1ef      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3720      	adds	r7, #32
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40023800 	.word	0x40023800

080055e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e09d      	b.n	8005736 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d108      	bne.n	8005614 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800560a:	d009      	beq.n	8005620 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	61da      	str	r2, [r3, #28]
 8005612:	e005      	b.n	8005620 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fc fd14 	bl	8002068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005656:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005660:	d902      	bls.n	8005668 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	e002      	b.n	800566e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800566c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005676:	d007      	beq.n	8005688 <HAL_SPI_Init+0xa0>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005680:	d002      	beq.n	8005688 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ca:	ea42 0103 	orr.w	r1, r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	0c1b      	lsrs	r3, r3, #16
 80056e4:	f003 0204 	and.w	r2, r3, #4
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005704:	ea42 0103 	orr.w	r1, r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005724:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e049      	b.n	80057e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7fc fd6d 	bl	8002244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3304      	adds	r3, #4
 800577a:	4619      	mov	r1, r3
 800577c:	4610      	mov	r0, r2
 800577e:	f000 fd09 	bl	8006194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e049      	b.n	8005892 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fc fe32 	bl	800247c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f000 fcb2 	bl	8006194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d109      	bne.n	80058c0 <HAL_TIM_PWM_Start+0x24>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	e03c      	b.n	800593a <HAL_TIM_PWM_Start+0x9e>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d109      	bne.n	80058da <HAL_TIM_PWM_Start+0x3e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	bf14      	ite	ne
 80058d2:	2301      	movne	r3, #1
 80058d4:	2300      	moveq	r3, #0
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	e02f      	b.n	800593a <HAL_TIM_PWM_Start+0x9e>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d109      	bne.n	80058f4 <HAL_TIM_PWM_Start+0x58>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	bf14      	ite	ne
 80058ec:	2301      	movne	r3, #1
 80058ee:	2300      	moveq	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	e022      	b.n	800593a <HAL_TIM_PWM_Start+0x9e>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b0c      	cmp	r3, #12
 80058f8:	d109      	bne.n	800590e <HAL_TIM_PWM_Start+0x72>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b01      	cmp	r3, #1
 8005904:	bf14      	ite	ne
 8005906:	2301      	movne	r3, #1
 8005908:	2300      	moveq	r3, #0
 800590a:	b2db      	uxtb	r3, r3
 800590c:	e015      	b.n	800593a <HAL_TIM_PWM_Start+0x9e>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b10      	cmp	r3, #16
 8005912:	d109      	bne.n	8005928 <HAL_TIM_PWM_Start+0x8c>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	bf14      	ite	ne
 8005920:	2301      	movne	r3, #1
 8005922:	2300      	moveq	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	e008      	b.n	800593a <HAL_TIM_PWM_Start+0x9e>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	bf14      	ite	ne
 8005934:	2301      	movne	r3, #1
 8005936:	2300      	moveq	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e092      	b.n	8005a68 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <HAL_TIM_PWM_Start+0xb6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005950:	e023      	b.n	800599a <HAL_TIM_PWM_Start+0xfe>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b04      	cmp	r3, #4
 8005956:	d104      	bne.n	8005962 <HAL_TIM_PWM_Start+0xc6>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005960:	e01b      	b.n	800599a <HAL_TIM_PWM_Start+0xfe>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b08      	cmp	r3, #8
 8005966:	d104      	bne.n	8005972 <HAL_TIM_PWM_Start+0xd6>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005970:	e013      	b.n	800599a <HAL_TIM_PWM_Start+0xfe>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b0c      	cmp	r3, #12
 8005976:	d104      	bne.n	8005982 <HAL_TIM_PWM_Start+0xe6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005980:	e00b      	b.n	800599a <HAL_TIM_PWM_Start+0xfe>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b10      	cmp	r3, #16
 8005986:	d104      	bne.n	8005992 <HAL_TIM_PWM_Start+0xf6>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005990:	e003      	b.n	800599a <HAL_TIM_PWM_Start+0xfe>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2202      	movs	r2, #2
 8005996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2201      	movs	r2, #1
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f001 f8b8 	bl	8006b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a30      	ldr	r2, [pc, #192]	; (8005a70 <HAL_TIM_PWM_Start+0x1d4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d004      	beq.n	80059bc <HAL_TIM_PWM_Start+0x120>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a2f      	ldr	r2, [pc, #188]	; (8005a74 <HAL_TIM_PWM_Start+0x1d8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d101      	bne.n	80059c0 <HAL_TIM_PWM_Start+0x124>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <HAL_TIM_PWM_Start+0x126>
 80059c0:	2300      	movs	r3, #0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a25      	ldr	r2, [pc, #148]	; (8005a70 <HAL_TIM_PWM_Start+0x1d4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d022      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x18a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e8:	d01d      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x18a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a22      	ldr	r2, [pc, #136]	; (8005a78 <HAL_TIM_PWM_Start+0x1dc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d018      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x18a>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a20      	ldr	r2, [pc, #128]	; (8005a7c <HAL_TIM_PWM_Start+0x1e0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x18a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1f      	ldr	r2, [pc, #124]	; (8005a80 <HAL_TIM_PWM_Start+0x1e4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00e      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x18a>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a19      	ldr	r2, [pc, #100]	; (8005a74 <HAL_TIM_PWM_Start+0x1d8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d009      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x18a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1b      	ldr	r2, [pc, #108]	; (8005a84 <HAL_TIM_PWM_Start+0x1e8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d004      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x18a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a19      	ldr	r2, [pc, #100]	; (8005a88 <HAL_TIM_PWM_Start+0x1ec>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d115      	bne.n	8005a52 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <HAL_TIM_PWM_Start+0x1f0>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b06      	cmp	r3, #6
 8005a36:	d015      	beq.n	8005a64 <HAL_TIM_PWM_Start+0x1c8>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3e:	d011      	beq.n	8005a64 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a50:	e008      	b.n	8005a64 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0201 	orr.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	e000      	b.n	8005a66 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40010000 	.word	0x40010000
 8005a74:	40010400 	.word	0x40010400
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40014000 	.word	0x40014000
 8005a88:	40001800 	.word	0x40001800
 8005a8c:	00010007 	.word	0x00010007

08005a90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e049      	b.n	8005b36 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f841 	bl	8005b3e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f000 fb60 	bl	8006194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e08f      	b.n	8005c88 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7fc fc07 	bl	8002390 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6899      	ldr	r1, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	4b3e      	ldr	r3, [pc, #248]	; (8005c90 <HAL_TIM_Encoder_Init+0x13c>)
 8005b96:	400b      	ands	r3, r1
 8005b98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	f000 faf5 	bl	8006194 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4b31      	ldr	r3, [pc, #196]	; (8005c94 <HAL_TIM_Encoder_Init+0x140>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	4313      	orrs	r3, r2
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4b2b      	ldr	r3, [pc, #172]	; (8005c98 <HAL_TIM_Encoder_Init+0x144>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <HAL_TIM_Encoder_Init+0x148>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	4313      	orrs	r3, r2
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	011a      	lsls	r2, r3, #4
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	031b      	lsls	r3, r3, #12
 8005c14:	4313      	orrs	r3, r2
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	4313      	orrs	r3, r2
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	fffebff8 	.word	0xfffebff8
 8005c94:	fffffcfc 	.word	0xfffffcfc
 8005c98:	fffff3f3 	.word	0xfffff3f3
 8005c9c:	ffff0f0f 	.word	0xffff0f0f

08005ca0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_TIM_IC_ConfigChannel+0x1e>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e088      	b.n	8005dd0 <HAL_TIM_IC_ConfigChannel+0x130>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d11b      	bne.n	8005d04 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005cdc:	f000 fd58 	bl	8006790 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 020c 	bic.w	r2, r2, #12
 8005cee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6999      	ldr	r1, [r3, #24]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	619a      	str	r2, [r3, #24]
 8005d02:	e060      	b.n	8005dc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d11c      	bne.n	8005d44 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005d1a:	f000 fddc 	bl	80068d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699a      	ldr	r2, [r3, #24]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6999      	ldr	r1, [r3, #24]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	021a      	lsls	r2, r3, #8
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	619a      	str	r2, [r3, #24]
 8005d42:	e040      	b.n	8005dc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d11b      	bne.n	8005d82 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005d5a:	f000 fe29 	bl	80069b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 020c 	bic.w	r2, r2, #12
 8005d6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69d9      	ldr	r1, [r3, #28]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	61da      	str	r2, [r3, #28]
 8005d80:	e021      	b.n	8005dc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b0c      	cmp	r3, #12
 8005d86:	d11c      	bne.n	8005dc2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d98:	f000 fe46 	bl	8006a28 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69da      	ldr	r2, [r3, #28]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005daa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69d9      	ldr	r1, [r3, #28]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	021a      	lsls	r2, r3, #8
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	61da      	str	r2, [r3, #28]
 8005dc0:	e001      	b.n	8005dc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e0ff      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b14      	cmp	r3, #20
 8005e02:	f200 80f0 	bhi.w	8005fe6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e06:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e61 	.word	0x08005e61
 8005e10:	08005fe7 	.word	0x08005fe7
 8005e14:	08005fe7 	.word	0x08005fe7
 8005e18:	08005fe7 	.word	0x08005fe7
 8005e1c:	08005ea1 	.word	0x08005ea1
 8005e20:	08005fe7 	.word	0x08005fe7
 8005e24:	08005fe7 	.word	0x08005fe7
 8005e28:	08005fe7 	.word	0x08005fe7
 8005e2c:	08005ee3 	.word	0x08005ee3
 8005e30:	08005fe7 	.word	0x08005fe7
 8005e34:	08005fe7 	.word	0x08005fe7
 8005e38:	08005fe7 	.word	0x08005fe7
 8005e3c:	08005f23 	.word	0x08005f23
 8005e40:	08005fe7 	.word	0x08005fe7
 8005e44:	08005fe7 	.word	0x08005fe7
 8005e48:	08005fe7 	.word	0x08005fe7
 8005e4c:	08005f65 	.word	0x08005f65
 8005e50:	08005fe7 	.word	0x08005fe7
 8005e54:	08005fe7 	.word	0x08005fe7
 8005e58:	08005fe7 	.word	0x08005fe7
 8005e5c:	08005fa5 	.word	0x08005fa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fa34 	bl	80062d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0208 	orr.w	r2, r2, #8
 8005e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0204 	bic.w	r2, r2, #4
 8005e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6999      	ldr	r1, [r3, #24]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	619a      	str	r2, [r3, #24]
      break;
 8005e9e:	e0a5      	b.n	8005fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fa86 	bl	80063b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6999      	ldr	r1, [r3, #24]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	021a      	lsls	r2, r3, #8
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	619a      	str	r2, [r3, #24]
      break;
 8005ee0:	e084      	b.n	8005fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 fadd 	bl	80064a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69da      	ldr	r2, [r3, #28]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0208 	orr.w	r2, r2, #8
 8005efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0204 	bic.w	r2, r2, #4
 8005f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69d9      	ldr	r1, [r3, #28]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	61da      	str	r2, [r3, #28]
      break;
 8005f20:	e064      	b.n	8005fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fb33 	bl	8006594 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69d9      	ldr	r1, [r3, #28]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	021a      	lsls	r2, r3, #8
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	61da      	str	r2, [r3, #28]
      break;
 8005f62:	e043      	b.n	8005fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fb6a 	bl	8006644 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0208 	orr.w	r2, r2, #8
 8005f7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0204 	bic.w	r2, r2, #4
 8005f8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fa2:	e023      	b.n	8005fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fb9c 	bl	80066e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	021a      	lsls	r2, r3, #8
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fe4:	e002      	b.n	8005fec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop

08006000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_TIM_ConfigClockSource+0x1c>
 8006018:	2302      	movs	r3, #2
 800601a:	e0b4      	b.n	8006186 <HAL_TIM_ConfigClockSource+0x186>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	4b56      	ldr	r3, [pc, #344]	; (8006190 <HAL_TIM_ConfigClockSource+0x190>)
 8006038:	4013      	ands	r3, r2
 800603a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006054:	d03e      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0xd4>
 8006056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800605a:	f200 8087 	bhi.w	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800605e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006062:	f000 8086 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x172>
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606a:	d87f      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800606c:	2b70      	cmp	r3, #112	; 0x70
 800606e:	d01a      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0xa6>
 8006070:	2b70      	cmp	r3, #112	; 0x70
 8006072:	d87b      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 8006074:	2b60      	cmp	r3, #96	; 0x60
 8006076:	d050      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x11a>
 8006078:	2b60      	cmp	r3, #96	; 0x60
 800607a:	d877      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b50      	cmp	r3, #80	; 0x50
 800607e:	d03c      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0xfa>
 8006080:	2b50      	cmp	r3, #80	; 0x50
 8006082:	d873      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d058      	beq.n	800613a <HAL_TIM_ConfigClockSource+0x13a>
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d86f      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800608c:	2b30      	cmp	r3, #48	; 0x30
 800608e:	d064      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15a>
 8006090:	2b30      	cmp	r3, #48	; 0x30
 8006092:	d86b      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 8006094:	2b20      	cmp	r3, #32
 8006096:	d060      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15a>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d867      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d05c      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15a>
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d05a      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15a>
 80060a4:	e062      	b.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060b6:	f000 fd0f 	bl	8006ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	609a      	str	r2, [r3, #8]
      break;
 80060d2:	e04f      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060e4:	f000 fcf8 	bl	8006ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060f6:	609a      	str	r2, [r3, #8]
      break;
 80060f8:	e03c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006106:	461a      	mov	r2, r3
 8006108:	f000 fbb6 	bl	8006878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2150      	movs	r1, #80	; 0x50
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fcc5 	bl	8006aa2 <TIM_ITRx_SetConfig>
      break;
 8006118:	e02c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006126:	461a      	mov	r2, r3
 8006128:	f000 fc12 	bl	8006950 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2160      	movs	r1, #96	; 0x60
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fcb5 	bl	8006aa2 <TIM_ITRx_SetConfig>
      break;
 8006138:	e01c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006146:	461a      	mov	r2, r3
 8006148:	f000 fb96 	bl	8006878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2140      	movs	r1, #64	; 0x40
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fca5 	bl	8006aa2 <TIM_ITRx_SetConfig>
      break;
 8006158:	e00c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f000 fc9c 	bl	8006aa2 <TIM_ITRx_SetConfig>
      break;
 800616a:	e003      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	73fb      	strb	r3, [r7, #15]
      break;
 8006170:	e000      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	fffeff88 	.word	0xfffeff88

08006194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a40      	ldr	r2, [pc, #256]	; (80062a8 <TIM_Base_SetConfig+0x114>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d013      	beq.n	80061d4 <TIM_Base_SetConfig+0x40>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b2:	d00f      	beq.n	80061d4 <TIM_Base_SetConfig+0x40>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a3d      	ldr	r2, [pc, #244]	; (80062ac <TIM_Base_SetConfig+0x118>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00b      	beq.n	80061d4 <TIM_Base_SetConfig+0x40>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a3c      	ldr	r2, [pc, #240]	; (80062b0 <TIM_Base_SetConfig+0x11c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d007      	beq.n	80061d4 <TIM_Base_SetConfig+0x40>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a3b      	ldr	r2, [pc, #236]	; (80062b4 <TIM_Base_SetConfig+0x120>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_Base_SetConfig+0x40>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a3a      	ldr	r2, [pc, #232]	; (80062b8 <TIM_Base_SetConfig+0x124>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d108      	bne.n	80061e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a2f      	ldr	r2, [pc, #188]	; (80062a8 <TIM_Base_SetConfig+0x114>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d02b      	beq.n	8006246 <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f4:	d027      	beq.n	8006246 <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a2c      	ldr	r2, [pc, #176]	; (80062ac <TIM_Base_SetConfig+0x118>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d023      	beq.n	8006246 <TIM_Base_SetConfig+0xb2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a2b      	ldr	r2, [pc, #172]	; (80062b0 <TIM_Base_SetConfig+0x11c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d01f      	beq.n	8006246 <TIM_Base_SetConfig+0xb2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a2a      	ldr	r2, [pc, #168]	; (80062b4 <TIM_Base_SetConfig+0x120>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d01b      	beq.n	8006246 <TIM_Base_SetConfig+0xb2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a29      	ldr	r2, [pc, #164]	; (80062b8 <TIM_Base_SetConfig+0x124>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d017      	beq.n	8006246 <TIM_Base_SetConfig+0xb2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a28      	ldr	r2, [pc, #160]	; (80062bc <TIM_Base_SetConfig+0x128>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <TIM_Base_SetConfig+0xb2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a27      	ldr	r2, [pc, #156]	; (80062c0 <TIM_Base_SetConfig+0x12c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00f      	beq.n	8006246 <TIM_Base_SetConfig+0xb2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a26      	ldr	r2, [pc, #152]	; (80062c4 <TIM_Base_SetConfig+0x130>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00b      	beq.n	8006246 <TIM_Base_SetConfig+0xb2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a25      	ldr	r2, [pc, #148]	; (80062c8 <TIM_Base_SetConfig+0x134>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d007      	beq.n	8006246 <TIM_Base_SetConfig+0xb2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a24      	ldr	r2, [pc, #144]	; (80062cc <TIM_Base_SetConfig+0x138>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d003      	beq.n	8006246 <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a23      	ldr	r2, [pc, #140]	; (80062d0 <TIM_Base_SetConfig+0x13c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d108      	bne.n	8006258 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a0a      	ldr	r2, [pc, #40]	; (80062a8 <TIM_Base_SetConfig+0x114>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d003      	beq.n	800628c <TIM_Base_SetConfig+0xf8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a0c      	ldr	r2, [pc, #48]	; (80062b8 <TIM_Base_SetConfig+0x124>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d103      	bne.n	8006294 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	615a      	str	r2, [r3, #20]
}
 800629a:	bf00      	nop
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40010000 	.word	0x40010000
 80062ac:	40000400 	.word	0x40000400
 80062b0:	40000800 	.word	0x40000800
 80062b4:	40000c00 	.word	0x40000c00
 80062b8:	40010400 	.word	0x40010400
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40014400 	.word	0x40014400
 80062c4:	40014800 	.word	0x40014800
 80062c8:	40001800 	.word	0x40001800
 80062cc:	40001c00 	.word	0x40001c00
 80062d0:	40002000 	.word	0x40002000

080062d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f023 0201 	bic.w	r2, r3, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	4b2b      	ldr	r3, [pc, #172]	; (80063ac <TIM_OC1_SetConfig+0xd8>)
 8006300:	4013      	ands	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0303 	bic.w	r3, r3, #3
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f023 0302 	bic.w	r3, r3, #2
 800631c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a21      	ldr	r2, [pc, #132]	; (80063b0 <TIM_OC1_SetConfig+0xdc>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d003      	beq.n	8006338 <TIM_OC1_SetConfig+0x64>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a20      	ldr	r2, [pc, #128]	; (80063b4 <TIM_OC1_SetConfig+0xe0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d10c      	bne.n	8006352 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f023 0308 	bic.w	r3, r3, #8
 800633e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f023 0304 	bic.w	r3, r3, #4
 8006350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a16      	ldr	r2, [pc, #88]	; (80063b0 <TIM_OC1_SetConfig+0xdc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d003      	beq.n	8006362 <TIM_OC1_SetConfig+0x8e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <TIM_OC1_SetConfig+0xe0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d111      	bne.n	8006386 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	621a      	str	r2, [r3, #32]
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	fffeff8f 	.word	0xfffeff8f
 80063b0:	40010000 	.word	0x40010000
 80063b4:	40010400 	.word	0x40010400

080063b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f023 0210 	bic.w	r2, r3, #16
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4b2e      	ldr	r3, [pc, #184]	; (800649c <TIM_OC2_SetConfig+0xe4>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f023 0320 	bic.w	r3, r3, #32
 8006402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a23      	ldr	r2, [pc, #140]	; (80064a0 <TIM_OC2_SetConfig+0xe8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_OC2_SetConfig+0x68>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <TIM_OC2_SetConfig+0xec>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d10d      	bne.n	800643c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800643a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a18      	ldr	r2, [pc, #96]	; (80064a0 <TIM_OC2_SetConfig+0xe8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <TIM_OC2_SetConfig+0x94>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a17      	ldr	r2, [pc, #92]	; (80064a4 <TIM_OC2_SetConfig+0xec>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d113      	bne.n	8006474 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800645a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	621a      	str	r2, [r3, #32]
}
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	feff8fff 	.word	0xfeff8fff
 80064a0:	40010000 	.word	0x40010000
 80064a4:	40010400 	.word	0x40010400

080064a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4b2d      	ldr	r3, [pc, #180]	; (8006588 <TIM_OC3_SetConfig+0xe0>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0303 	bic.w	r3, r3, #3
 80064de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a22      	ldr	r2, [pc, #136]	; (800658c <TIM_OC3_SetConfig+0xe4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d003      	beq.n	800650e <TIM_OC3_SetConfig+0x66>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a21      	ldr	r2, [pc, #132]	; (8006590 <TIM_OC3_SetConfig+0xe8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10d      	bne.n	800652a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a17      	ldr	r2, [pc, #92]	; (800658c <TIM_OC3_SetConfig+0xe4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d003      	beq.n	800653a <TIM_OC3_SetConfig+0x92>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a16      	ldr	r2, [pc, #88]	; (8006590 <TIM_OC3_SetConfig+0xe8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d113      	bne.n	8006562 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	621a      	str	r2, [r3, #32]
}
 800657c:	bf00      	nop
 800657e:	371c      	adds	r7, #28
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	fffeff8f 	.word	0xfffeff8f
 800658c:	40010000 	.word	0x40010000
 8006590:	40010400 	.word	0x40010400

08006594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4b1e      	ldr	r3, [pc, #120]	; (8006638 <TIM_OC4_SetConfig+0xa4>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	031b      	lsls	r3, r3, #12
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a13      	ldr	r2, [pc, #76]	; (800663c <TIM_OC4_SetConfig+0xa8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_OC4_SetConfig+0x68>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a12      	ldr	r2, [pc, #72]	; (8006640 <TIM_OC4_SetConfig+0xac>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d109      	bne.n	8006610 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	019b      	lsls	r3, r3, #6
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	621a      	str	r2, [r3, #32]
}
 800662a:	bf00      	nop
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	feff8fff 	.word	0xfeff8fff
 800663c:	40010000 	.word	0x40010000
 8006640:	40010400 	.word	0x40010400

08006644 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4b1b      	ldr	r3, [pc, #108]	; (80066dc <TIM_OC5_SetConfig+0x98>)
 8006670:	4013      	ands	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006684:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	041b      	lsls	r3, r3, #16
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a12      	ldr	r2, [pc, #72]	; (80066e0 <TIM_OC5_SetConfig+0x9c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <TIM_OC5_SetConfig+0x5e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a11      	ldr	r2, [pc, #68]	; (80066e4 <TIM_OC5_SetConfig+0xa0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d109      	bne.n	80066b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	621a      	str	r2, [r3, #32]
}
 80066d0:	bf00      	nop
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	fffeff8f 	.word	0xfffeff8f
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40010400 	.word	0x40010400

080066e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4b1c      	ldr	r3, [pc, #112]	; (8006784 <TIM_OC6_SetConfig+0x9c>)
 8006714:	4013      	ands	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800672a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	051b      	lsls	r3, r3, #20
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a13      	ldr	r2, [pc, #76]	; (8006788 <TIM_OC6_SetConfig+0xa0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_OC6_SetConfig+0x60>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a12      	ldr	r2, [pc, #72]	; (800678c <TIM_OC6_SetConfig+0xa4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d109      	bne.n	800675c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800674e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	029b      	lsls	r3, r3, #10
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	621a      	str	r2, [r3, #32]
}
 8006776:	bf00      	nop
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	feff8fff 	.word	0xfeff8fff
 8006788:	40010000 	.word	0x40010000
 800678c:	40010400 	.word	0x40010400

08006790 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	f023 0201 	bic.w	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a28      	ldr	r2, [pc, #160]	; (800685c <TIM_TI1_SetConfig+0xcc>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01b      	beq.n	80067f6 <TIM_TI1_SetConfig+0x66>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c4:	d017      	beq.n	80067f6 <TIM_TI1_SetConfig+0x66>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4a25      	ldr	r2, [pc, #148]	; (8006860 <TIM_TI1_SetConfig+0xd0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d013      	beq.n	80067f6 <TIM_TI1_SetConfig+0x66>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4a24      	ldr	r2, [pc, #144]	; (8006864 <TIM_TI1_SetConfig+0xd4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00f      	beq.n	80067f6 <TIM_TI1_SetConfig+0x66>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4a23      	ldr	r2, [pc, #140]	; (8006868 <TIM_TI1_SetConfig+0xd8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00b      	beq.n	80067f6 <TIM_TI1_SetConfig+0x66>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4a22      	ldr	r2, [pc, #136]	; (800686c <TIM_TI1_SetConfig+0xdc>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d007      	beq.n	80067f6 <TIM_TI1_SetConfig+0x66>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4a21      	ldr	r2, [pc, #132]	; (8006870 <TIM_TI1_SetConfig+0xe0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <TIM_TI1_SetConfig+0x66>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4a20      	ldr	r2, [pc, #128]	; (8006874 <TIM_TI1_SetConfig+0xe4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d101      	bne.n	80067fa <TIM_TI1_SetConfig+0x6a>
 80067f6:	2301      	movs	r3, #1
 80067f8:	e000      	b.n	80067fc <TIM_TI1_SetConfig+0x6c>
 80067fa:	2300      	movs	r3, #0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d008      	beq.n	8006812 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f023 0303 	bic.w	r3, r3, #3
 8006806:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	e003      	b.n	800681a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006820:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	b2db      	uxtb	r3, r3
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f023 030a 	bic.w	r3, r3, #10
 8006834:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f003 030a 	and.w	r3, r3, #10
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40010000 	.word	0x40010000
 8006860:	40000400 	.word	0x40000400
 8006864:	40000800 	.word	0x40000800
 8006868:	40000c00 	.word	0x40000c00
 800686c:	40010400 	.word	0x40010400
 8006870:	40014000 	.word	0x40014000
 8006874:	40001800 	.word	0x40001800

08006878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f023 0201 	bic.w	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f023 030a 	bic.w	r3, r3, #10
 80068b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	621a      	str	r2, [r3, #32]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b087      	sub	sp, #28
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	607a      	str	r2, [r7, #4]
 80068e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	f023 0210 	bic.w	r2, r3, #16
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006902:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	021b      	lsls	r3, r3, #8
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	031b      	lsls	r3, r3, #12
 800691a:	b29b      	uxth	r3, r3
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006928:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	621a      	str	r2, [r3, #32]
}
 8006944:	bf00      	nop
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f023 0210 	bic.w	r2, r3, #16
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800697a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	031b      	lsls	r3, r3, #12
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800698c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	621a      	str	r2, [r3, #32]
}
 80069a4:	bf00      	nop
 80069a6:	371c      	adds	r7, #28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 0303 	bic.w	r3, r3, #3
 80069dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006a00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	021b      	lsls	r3, r3, #8
 8006a06:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	621a      	str	r2, [r3, #32]
}
 8006a1c:	bf00      	nop
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	031b      	lsls	r3, r3, #12
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006a7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	031b      	lsls	r3, r3, #12
 8006a80:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	621a      	str	r2, [r3, #32]
}
 8006a96:	bf00      	nop
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f043 0307 	orr.w	r3, r3, #7
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	609a      	str	r2, [r3, #8]
}
 8006acc:	bf00      	nop
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	021a      	lsls	r2, r3, #8
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	609a      	str	r2, [r3, #8]
}
 8006b0c:	bf00      	nop
 8006b0e:	371c      	adds	r7, #28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a1a      	ldr	r2, [r3, #32]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	401a      	ands	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a1a      	ldr	r2, [r3, #32]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f003 031f 	and.w	r3, r3, #31
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b50:	431a      	orrs	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
	...

08006b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e06d      	b.n	8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a30      	ldr	r2, [pc, #192]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a2f      	ldr	r2, [pc, #188]	; (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d108      	bne.n	8006bc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a20      	ldr	r2, [pc, #128]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d022      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bee:	d01d      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a1d      	ldr	r2, [pc, #116]	; (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d018      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a1c      	ldr	r2, [pc, #112]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d013      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a1a      	ldr	r2, [pc, #104]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00e      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d009      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a16      	ldr	r2, [pc, #88]	; (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d004      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d10c      	bne.n	8006c46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	40010000 	.word	0x40010000
 8006c68:	40010400 	.word	0x40010400
 8006c6c:	40000400 	.word	0x40000400
 8006c70:	40000800 	.word	0x40000800
 8006c74:	40000c00 	.word	0x40000c00
 8006c78:	40014000 	.word	0x40014000
 8006c7c:	40001800 	.word	0x40001800

08006c80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e065      	b.n	8006d68 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	041b      	lsls	r3, r3, #16
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a16      	ldr	r2, [pc, #88]	; (8006d74 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a14      	ldr	r2, [pc, #80]	; (8006d78 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d115      	bne.n	8006d56 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	051b      	lsls	r3, r3, #20
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	40010000 	.word	0x40010000
 8006d78:	40010400 	.word	0x40010400

08006d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e040      	b.n	8006e10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fb fca2 	bl	80026e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2224      	movs	r2, #36	; 0x24
 8006da8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0201 	bic.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f8b0 	bl	8006f20 <UART_SetConfig>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e022      	b.n	8006e10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fb08 	bl	80073e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0201 	orr.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fb8f 	bl	800752c <UART_CheckIdleState>
 8006e0e:	4603      	mov	r3, r0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	; 0x28
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	4613      	mov	r3, r2
 8006e26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d171      	bne.n	8006f14 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <HAL_UART_Transmit+0x24>
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e06a      	b.n	8006f16 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2221      	movs	r2, #33	; 0x21
 8006e4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e4e:	f7fb febf 	bl	8002bd0 <HAL_GetTick>
 8006e52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	88fa      	ldrh	r2, [r7, #6]
 8006e58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	88fa      	ldrh	r2, [r7, #6]
 8006e60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6c:	d108      	bne.n	8006e80 <HAL_UART_Transmit+0x68>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d104      	bne.n	8006e80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	61bb      	str	r3, [r7, #24]
 8006e7e:	e003      	b.n	8006e88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e84:	2300      	movs	r3, #0
 8006e86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e88:	e02c      	b.n	8006ee4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2200      	movs	r2, #0
 8006e92:	2180      	movs	r1, #128	; 0x80
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fb96 	bl	80075c6 <UART_WaitOnFlagUntilTimeout>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e038      	b.n	8006f16 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10b      	bne.n	8006ec2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	3302      	adds	r3, #2
 8006ebe:	61bb      	str	r3, [r7, #24]
 8006ec0:	e007      	b.n	8006ed2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	781a      	ldrb	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1cc      	bne.n	8006e8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2140      	movs	r1, #64	; 0x40
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 fb63 	bl	80075c6 <UART_WaitOnFlagUntilTimeout>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e005      	b.n	8006f16 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	e000      	b.n	8006f16 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006f14:	2302      	movs	r3, #2
  }
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4ba6      	ldr	r3, [pc, #664]	; (80071e4 <UART_SetConfig+0x2c4>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6812      	ldr	r2, [r2, #0]
 8006f52:	6979      	ldr	r1, [r7, #20]
 8006f54:	430b      	orrs	r3, r1
 8006f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a94      	ldr	r2, [pc, #592]	; (80071e8 <UART_SetConfig+0x2c8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d120      	bne.n	8006fde <UART_SetConfig+0xbe>
 8006f9c:	4b93      	ldr	r3, [pc, #588]	; (80071ec <UART_SetConfig+0x2cc>)
 8006f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d816      	bhi.n	8006fd8 <UART_SetConfig+0xb8>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <UART_SetConfig+0x90>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fc1 	.word	0x08006fc1
 8006fb4:	08006fcd 	.word	0x08006fcd
 8006fb8:	08006fc7 	.word	0x08006fc7
 8006fbc:	08006fd3 	.word	0x08006fd3
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	77fb      	strb	r3, [r7, #31]
 8006fc4:	e150      	b.n	8007268 <UART_SetConfig+0x348>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	77fb      	strb	r3, [r7, #31]
 8006fca:	e14d      	b.n	8007268 <UART_SetConfig+0x348>
 8006fcc:	2304      	movs	r3, #4
 8006fce:	77fb      	strb	r3, [r7, #31]
 8006fd0:	e14a      	b.n	8007268 <UART_SetConfig+0x348>
 8006fd2:	2308      	movs	r3, #8
 8006fd4:	77fb      	strb	r3, [r7, #31]
 8006fd6:	e147      	b.n	8007268 <UART_SetConfig+0x348>
 8006fd8:	2310      	movs	r3, #16
 8006fda:	77fb      	strb	r3, [r7, #31]
 8006fdc:	e144      	b.n	8007268 <UART_SetConfig+0x348>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a83      	ldr	r2, [pc, #524]	; (80071f0 <UART_SetConfig+0x2d0>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d132      	bne.n	800704e <UART_SetConfig+0x12e>
 8006fe8:	4b80      	ldr	r3, [pc, #512]	; (80071ec <UART_SetConfig+0x2cc>)
 8006fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fee:	f003 030c 	and.w	r3, r3, #12
 8006ff2:	2b0c      	cmp	r3, #12
 8006ff4:	d828      	bhi.n	8007048 <UART_SetConfig+0x128>
 8006ff6:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <UART_SetConfig+0xdc>)
 8006ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffc:	08007031 	.word	0x08007031
 8007000:	08007049 	.word	0x08007049
 8007004:	08007049 	.word	0x08007049
 8007008:	08007049 	.word	0x08007049
 800700c:	0800703d 	.word	0x0800703d
 8007010:	08007049 	.word	0x08007049
 8007014:	08007049 	.word	0x08007049
 8007018:	08007049 	.word	0x08007049
 800701c:	08007037 	.word	0x08007037
 8007020:	08007049 	.word	0x08007049
 8007024:	08007049 	.word	0x08007049
 8007028:	08007049 	.word	0x08007049
 800702c:	08007043 	.word	0x08007043
 8007030:	2300      	movs	r3, #0
 8007032:	77fb      	strb	r3, [r7, #31]
 8007034:	e118      	b.n	8007268 <UART_SetConfig+0x348>
 8007036:	2302      	movs	r3, #2
 8007038:	77fb      	strb	r3, [r7, #31]
 800703a:	e115      	b.n	8007268 <UART_SetConfig+0x348>
 800703c:	2304      	movs	r3, #4
 800703e:	77fb      	strb	r3, [r7, #31]
 8007040:	e112      	b.n	8007268 <UART_SetConfig+0x348>
 8007042:	2308      	movs	r3, #8
 8007044:	77fb      	strb	r3, [r7, #31]
 8007046:	e10f      	b.n	8007268 <UART_SetConfig+0x348>
 8007048:	2310      	movs	r3, #16
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	e10c      	b.n	8007268 <UART_SetConfig+0x348>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a68      	ldr	r2, [pc, #416]	; (80071f4 <UART_SetConfig+0x2d4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d120      	bne.n	800709a <UART_SetConfig+0x17a>
 8007058:	4b64      	ldr	r3, [pc, #400]	; (80071ec <UART_SetConfig+0x2cc>)
 800705a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007062:	2b30      	cmp	r3, #48	; 0x30
 8007064:	d013      	beq.n	800708e <UART_SetConfig+0x16e>
 8007066:	2b30      	cmp	r3, #48	; 0x30
 8007068:	d814      	bhi.n	8007094 <UART_SetConfig+0x174>
 800706a:	2b20      	cmp	r3, #32
 800706c:	d009      	beq.n	8007082 <UART_SetConfig+0x162>
 800706e:	2b20      	cmp	r3, #32
 8007070:	d810      	bhi.n	8007094 <UART_SetConfig+0x174>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <UART_SetConfig+0x15c>
 8007076:	2b10      	cmp	r3, #16
 8007078:	d006      	beq.n	8007088 <UART_SetConfig+0x168>
 800707a:	e00b      	b.n	8007094 <UART_SetConfig+0x174>
 800707c:	2300      	movs	r3, #0
 800707e:	77fb      	strb	r3, [r7, #31]
 8007080:	e0f2      	b.n	8007268 <UART_SetConfig+0x348>
 8007082:	2302      	movs	r3, #2
 8007084:	77fb      	strb	r3, [r7, #31]
 8007086:	e0ef      	b.n	8007268 <UART_SetConfig+0x348>
 8007088:	2304      	movs	r3, #4
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e0ec      	b.n	8007268 <UART_SetConfig+0x348>
 800708e:	2308      	movs	r3, #8
 8007090:	77fb      	strb	r3, [r7, #31]
 8007092:	e0e9      	b.n	8007268 <UART_SetConfig+0x348>
 8007094:	2310      	movs	r3, #16
 8007096:	77fb      	strb	r3, [r7, #31]
 8007098:	e0e6      	b.n	8007268 <UART_SetConfig+0x348>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a56      	ldr	r2, [pc, #344]	; (80071f8 <UART_SetConfig+0x2d8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d120      	bne.n	80070e6 <UART_SetConfig+0x1c6>
 80070a4:	4b51      	ldr	r3, [pc, #324]	; (80071ec <UART_SetConfig+0x2cc>)
 80070a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070ae:	2bc0      	cmp	r3, #192	; 0xc0
 80070b0:	d013      	beq.n	80070da <UART_SetConfig+0x1ba>
 80070b2:	2bc0      	cmp	r3, #192	; 0xc0
 80070b4:	d814      	bhi.n	80070e0 <UART_SetConfig+0x1c0>
 80070b6:	2b80      	cmp	r3, #128	; 0x80
 80070b8:	d009      	beq.n	80070ce <UART_SetConfig+0x1ae>
 80070ba:	2b80      	cmp	r3, #128	; 0x80
 80070bc:	d810      	bhi.n	80070e0 <UART_SetConfig+0x1c0>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <UART_SetConfig+0x1a8>
 80070c2:	2b40      	cmp	r3, #64	; 0x40
 80070c4:	d006      	beq.n	80070d4 <UART_SetConfig+0x1b4>
 80070c6:	e00b      	b.n	80070e0 <UART_SetConfig+0x1c0>
 80070c8:	2300      	movs	r3, #0
 80070ca:	77fb      	strb	r3, [r7, #31]
 80070cc:	e0cc      	b.n	8007268 <UART_SetConfig+0x348>
 80070ce:	2302      	movs	r3, #2
 80070d0:	77fb      	strb	r3, [r7, #31]
 80070d2:	e0c9      	b.n	8007268 <UART_SetConfig+0x348>
 80070d4:	2304      	movs	r3, #4
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e0c6      	b.n	8007268 <UART_SetConfig+0x348>
 80070da:	2308      	movs	r3, #8
 80070dc:	77fb      	strb	r3, [r7, #31]
 80070de:	e0c3      	b.n	8007268 <UART_SetConfig+0x348>
 80070e0:	2310      	movs	r3, #16
 80070e2:	77fb      	strb	r3, [r7, #31]
 80070e4:	e0c0      	b.n	8007268 <UART_SetConfig+0x348>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a44      	ldr	r2, [pc, #272]	; (80071fc <UART_SetConfig+0x2dc>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d125      	bne.n	800713c <UART_SetConfig+0x21c>
 80070f0:	4b3e      	ldr	r3, [pc, #248]	; (80071ec <UART_SetConfig+0x2cc>)
 80070f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070fe:	d017      	beq.n	8007130 <UART_SetConfig+0x210>
 8007100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007104:	d817      	bhi.n	8007136 <UART_SetConfig+0x216>
 8007106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800710a:	d00b      	beq.n	8007124 <UART_SetConfig+0x204>
 800710c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007110:	d811      	bhi.n	8007136 <UART_SetConfig+0x216>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <UART_SetConfig+0x1fe>
 8007116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800711a:	d006      	beq.n	800712a <UART_SetConfig+0x20a>
 800711c:	e00b      	b.n	8007136 <UART_SetConfig+0x216>
 800711e:	2300      	movs	r3, #0
 8007120:	77fb      	strb	r3, [r7, #31]
 8007122:	e0a1      	b.n	8007268 <UART_SetConfig+0x348>
 8007124:	2302      	movs	r3, #2
 8007126:	77fb      	strb	r3, [r7, #31]
 8007128:	e09e      	b.n	8007268 <UART_SetConfig+0x348>
 800712a:	2304      	movs	r3, #4
 800712c:	77fb      	strb	r3, [r7, #31]
 800712e:	e09b      	b.n	8007268 <UART_SetConfig+0x348>
 8007130:	2308      	movs	r3, #8
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	e098      	b.n	8007268 <UART_SetConfig+0x348>
 8007136:	2310      	movs	r3, #16
 8007138:	77fb      	strb	r3, [r7, #31]
 800713a:	e095      	b.n	8007268 <UART_SetConfig+0x348>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a2f      	ldr	r2, [pc, #188]	; (8007200 <UART_SetConfig+0x2e0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d125      	bne.n	8007192 <UART_SetConfig+0x272>
 8007146:	4b29      	ldr	r3, [pc, #164]	; (80071ec <UART_SetConfig+0x2cc>)
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007150:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007154:	d017      	beq.n	8007186 <UART_SetConfig+0x266>
 8007156:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800715a:	d817      	bhi.n	800718c <UART_SetConfig+0x26c>
 800715c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007160:	d00b      	beq.n	800717a <UART_SetConfig+0x25a>
 8007162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007166:	d811      	bhi.n	800718c <UART_SetConfig+0x26c>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <UART_SetConfig+0x254>
 800716c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007170:	d006      	beq.n	8007180 <UART_SetConfig+0x260>
 8007172:	e00b      	b.n	800718c <UART_SetConfig+0x26c>
 8007174:	2301      	movs	r3, #1
 8007176:	77fb      	strb	r3, [r7, #31]
 8007178:	e076      	b.n	8007268 <UART_SetConfig+0x348>
 800717a:	2302      	movs	r3, #2
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	e073      	b.n	8007268 <UART_SetConfig+0x348>
 8007180:	2304      	movs	r3, #4
 8007182:	77fb      	strb	r3, [r7, #31]
 8007184:	e070      	b.n	8007268 <UART_SetConfig+0x348>
 8007186:	2308      	movs	r3, #8
 8007188:	77fb      	strb	r3, [r7, #31]
 800718a:	e06d      	b.n	8007268 <UART_SetConfig+0x348>
 800718c:	2310      	movs	r3, #16
 800718e:	77fb      	strb	r3, [r7, #31]
 8007190:	e06a      	b.n	8007268 <UART_SetConfig+0x348>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a1b      	ldr	r2, [pc, #108]	; (8007204 <UART_SetConfig+0x2e4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d138      	bne.n	800720e <UART_SetConfig+0x2ee>
 800719c:	4b13      	ldr	r3, [pc, #76]	; (80071ec <UART_SetConfig+0x2cc>)
 800719e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80071a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071aa:	d017      	beq.n	80071dc <UART_SetConfig+0x2bc>
 80071ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071b0:	d82a      	bhi.n	8007208 <UART_SetConfig+0x2e8>
 80071b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b6:	d00b      	beq.n	80071d0 <UART_SetConfig+0x2b0>
 80071b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071bc:	d824      	bhi.n	8007208 <UART_SetConfig+0x2e8>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <UART_SetConfig+0x2aa>
 80071c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c6:	d006      	beq.n	80071d6 <UART_SetConfig+0x2b6>
 80071c8:	e01e      	b.n	8007208 <UART_SetConfig+0x2e8>
 80071ca:	2300      	movs	r3, #0
 80071cc:	77fb      	strb	r3, [r7, #31]
 80071ce:	e04b      	b.n	8007268 <UART_SetConfig+0x348>
 80071d0:	2302      	movs	r3, #2
 80071d2:	77fb      	strb	r3, [r7, #31]
 80071d4:	e048      	b.n	8007268 <UART_SetConfig+0x348>
 80071d6:	2304      	movs	r3, #4
 80071d8:	77fb      	strb	r3, [r7, #31]
 80071da:	e045      	b.n	8007268 <UART_SetConfig+0x348>
 80071dc:	2308      	movs	r3, #8
 80071de:	77fb      	strb	r3, [r7, #31]
 80071e0:	e042      	b.n	8007268 <UART_SetConfig+0x348>
 80071e2:	bf00      	nop
 80071e4:	efff69f3 	.word	0xefff69f3
 80071e8:	40011000 	.word	0x40011000
 80071ec:	40023800 	.word	0x40023800
 80071f0:	40004400 	.word	0x40004400
 80071f4:	40004800 	.word	0x40004800
 80071f8:	40004c00 	.word	0x40004c00
 80071fc:	40005000 	.word	0x40005000
 8007200:	40011400 	.word	0x40011400
 8007204:	40007800 	.word	0x40007800
 8007208:	2310      	movs	r3, #16
 800720a:	77fb      	strb	r3, [r7, #31]
 800720c:	e02c      	b.n	8007268 <UART_SetConfig+0x348>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a72      	ldr	r2, [pc, #456]	; (80073dc <UART_SetConfig+0x4bc>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d125      	bne.n	8007264 <UART_SetConfig+0x344>
 8007218:	4b71      	ldr	r3, [pc, #452]	; (80073e0 <UART_SetConfig+0x4c0>)
 800721a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007222:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007226:	d017      	beq.n	8007258 <UART_SetConfig+0x338>
 8007228:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800722c:	d817      	bhi.n	800725e <UART_SetConfig+0x33e>
 800722e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007232:	d00b      	beq.n	800724c <UART_SetConfig+0x32c>
 8007234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007238:	d811      	bhi.n	800725e <UART_SetConfig+0x33e>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <UART_SetConfig+0x326>
 800723e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007242:	d006      	beq.n	8007252 <UART_SetConfig+0x332>
 8007244:	e00b      	b.n	800725e <UART_SetConfig+0x33e>
 8007246:	2300      	movs	r3, #0
 8007248:	77fb      	strb	r3, [r7, #31]
 800724a:	e00d      	b.n	8007268 <UART_SetConfig+0x348>
 800724c:	2302      	movs	r3, #2
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e00a      	b.n	8007268 <UART_SetConfig+0x348>
 8007252:	2304      	movs	r3, #4
 8007254:	77fb      	strb	r3, [r7, #31]
 8007256:	e007      	b.n	8007268 <UART_SetConfig+0x348>
 8007258:	2308      	movs	r3, #8
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e004      	b.n	8007268 <UART_SetConfig+0x348>
 800725e:	2310      	movs	r3, #16
 8007260:	77fb      	strb	r3, [r7, #31]
 8007262:	e001      	b.n	8007268 <UART_SetConfig+0x348>
 8007264:	2310      	movs	r3, #16
 8007266:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007270:	d15b      	bne.n	800732a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007272:	7ffb      	ldrb	r3, [r7, #31]
 8007274:	2b08      	cmp	r3, #8
 8007276:	d828      	bhi.n	80072ca <UART_SetConfig+0x3aa>
 8007278:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <UART_SetConfig+0x360>)
 800727a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727e:	bf00      	nop
 8007280:	080072a5 	.word	0x080072a5
 8007284:	080072ad 	.word	0x080072ad
 8007288:	080072b5 	.word	0x080072b5
 800728c:	080072cb 	.word	0x080072cb
 8007290:	080072bb 	.word	0x080072bb
 8007294:	080072cb 	.word	0x080072cb
 8007298:	080072cb 	.word	0x080072cb
 800729c:	080072cb 	.word	0x080072cb
 80072a0:	080072c3 	.word	0x080072c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a4:	f7fd fd50 	bl	8004d48 <HAL_RCC_GetPCLK1Freq>
 80072a8:	61b8      	str	r0, [r7, #24]
        break;
 80072aa:	e013      	b.n	80072d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072ac:	f7fd fd60 	bl	8004d70 <HAL_RCC_GetPCLK2Freq>
 80072b0:	61b8      	str	r0, [r7, #24]
        break;
 80072b2:	e00f      	b.n	80072d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b4:	4b4b      	ldr	r3, [pc, #300]	; (80073e4 <UART_SetConfig+0x4c4>)
 80072b6:	61bb      	str	r3, [r7, #24]
        break;
 80072b8:	e00c      	b.n	80072d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ba:	f7fd fc33 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 80072be:	61b8      	str	r0, [r7, #24]
        break;
 80072c0:	e008      	b.n	80072d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c6:	61bb      	str	r3, [r7, #24]
        break;
 80072c8:	e004      	b.n	80072d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	77bb      	strb	r3, [r7, #30]
        break;
 80072d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d074      	beq.n	80073c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	005a      	lsls	r2, r3, #1
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	085b      	lsrs	r3, r3, #1
 80072e4:	441a      	add	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	2b0f      	cmp	r3, #15
 80072f4:	d916      	bls.n	8007324 <UART_SetConfig+0x404>
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072fc:	d212      	bcs.n	8007324 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	b29b      	uxth	r3, r3
 8007302:	f023 030f 	bic.w	r3, r3, #15
 8007306:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	085b      	lsrs	r3, r3, #1
 800730c:	b29b      	uxth	r3, r3
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	b29a      	uxth	r2, r3
 8007314:	89fb      	ldrh	r3, [r7, #14]
 8007316:	4313      	orrs	r3, r2
 8007318:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	89fa      	ldrh	r2, [r7, #14]
 8007320:	60da      	str	r2, [r3, #12]
 8007322:	e04f      	b.n	80073c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	77bb      	strb	r3, [r7, #30]
 8007328:	e04c      	b.n	80073c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800732a:	7ffb      	ldrb	r3, [r7, #31]
 800732c:	2b08      	cmp	r3, #8
 800732e:	d828      	bhi.n	8007382 <UART_SetConfig+0x462>
 8007330:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <UART_SetConfig+0x418>)
 8007332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007336:	bf00      	nop
 8007338:	0800735d 	.word	0x0800735d
 800733c:	08007365 	.word	0x08007365
 8007340:	0800736d 	.word	0x0800736d
 8007344:	08007383 	.word	0x08007383
 8007348:	08007373 	.word	0x08007373
 800734c:	08007383 	.word	0x08007383
 8007350:	08007383 	.word	0x08007383
 8007354:	08007383 	.word	0x08007383
 8007358:	0800737b 	.word	0x0800737b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800735c:	f7fd fcf4 	bl	8004d48 <HAL_RCC_GetPCLK1Freq>
 8007360:	61b8      	str	r0, [r7, #24]
        break;
 8007362:	e013      	b.n	800738c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007364:	f7fd fd04 	bl	8004d70 <HAL_RCC_GetPCLK2Freq>
 8007368:	61b8      	str	r0, [r7, #24]
        break;
 800736a:	e00f      	b.n	800738c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800736c:	4b1d      	ldr	r3, [pc, #116]	; (80073e4 <UART_SetConfig+0x4c4>)
 800736e:	61bb      	str	r3, [r7, #24]
        break;
 8007370:	e00c      	b.n	800738c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007372:	f7fd fbd7 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8007376:	61b8      	str	r0, [r7, #24]
        break;
 8007378:	e008      	b.n	800738c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800737a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800737e:	61bb      	str	r3, [r7, #24]
        break;
 8007380:	e004      	b.n	800738c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	77bb      	strb	r3, [r7, #30]
        break;
 800738a:	bf00      	nop
    }

    if (pclk != 0U)
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d018      	beq.n	80073c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	085a      	lsrs	r2, r3, #1
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	441a      	add	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b0f      	cmp	r3, #15
 80073aa:	d909      	bls.n	80073c0 <UART_SetConfig+0x4a0>
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b2:	d205      	bcs.n	80073c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60da      	str	r2, [r3, #12]
 80073be:	e001      	b.n	80073c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80073d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40007c00 	.word	0x40007c00
 80073e0:	40023800 	.word	0x40023800
 80073e4:	00f42400 	.word	0x00f42400

080073e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	f003 0310 	and.w	r3, r3, #16
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d01a      	beq.n	80074fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074e6:	d10a      	bne.n	80074fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	605a      	str	r2, [r3, #4]
  }
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af02      	add	r7, sp, #8
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800753c:	f7fb fb48 	bl	8002bd0 <HAL_GetTick>
 8007540:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b08      	cmp	r3, #8
 800754e:	d10e      	bne.n	800756e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f831 	bl	80075c6 <UART_WaitOnFlagUntilTimeout>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e027      	b.n	80075be <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b04      	cmp	r3, #4
 800757a:	d10e      	bne.n	800759a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800757c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f81b 	bl	80075c6 <UART_WaitOnFlagUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e011      	b.n	80075be <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2220      	movs	r2, #32
 80075a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b09c      	sub	sp, #112	; 0x70
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	4613      	mov	r3, r2
 80075d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075d6:	e0a7      	b.n	8007728 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075de:	f000 80a3 	beq.w	8007728 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075e2:	f7fb faf5 	bl	8002bd0 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d302      	bcc.n	80075f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80075f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d13f      	bne.n	8007678 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007608:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800760c:	667b      	str	r3, [r7, #100]	; 0x64
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007618:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800761c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e6      	bne.n	80075f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3308      	adds	r3, #8
 8007630:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	f023 0301 	bic.w	r3, r3, #1
 8007640:	663b      	str	r3, [r7, #96]	; 0x60
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3308      	adds	r3, #8
 8007648:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800764a:	64ba      	str	r2, [r7, #72]	; 0x48
 800764c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e5      	bne.n	800762a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2220      	movs	r2, #32
 8007662:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2220      	movs	r2, #32
 8007668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e068      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b00      	cmp	r3, #0
 8007684:	d050      	beq.n	8007728 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007694:	d148      	bne.n	8007728 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800769e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076be:	637b      	str	r3, [r7, #52]	; 0x34
 80076c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e6      	bne.n	80076a0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3308      	adds	r3, #8
 80076d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	613b      	str	r3, [r7, #16]
   return(result);
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f023 0301 	bic.w	r3, r3, #1
 80076e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3308      	adds	r3, #8
 80076f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076f2:	623a      	str	r2, [r7, #32]
 80076f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	69f9      	ldr	r1, [r7, #28]
 80076f8:	6a3a      	ldr	r2, [r7, #32]
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e5      	bne.n	80076d2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2220      	movs	r2, #32
 800770a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2220      	movs	r2, #32
 8007710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2220      	movs	r2, #32
 8007718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e010      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	69da      	ldr	r2, [r3, #28]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	4013      	ands	r3, r2
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	429a      	cmp	r2, r3
 8007736:	bf0c      	ite	eq
 8007738:	2301      	moveq	r3, #1
 800773a:	2300      	movne	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	461a      	mov	r2, r3
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	429a      	cmp	r2, r3
 8007744:	f43f af48 	beq.w	80075d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3770      	adds	r7, #112	; 0x70
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <memset>:
 8007752:	4402      	add	r2, r0
 8007754:	4603      	mov	r3, r0
 8007756:	4293      	cmp	r3, r2
 8007758:	d100      	bne.n	800775c <memset+0xa>
 800775a:	4770      	bx	lr
 800775c:	f803 1b01 	strb.w	r1, [r3], #1
 8007760:	e7f9      	b.n	8007756 <memset+0x4>
	...

08007764 <__libc_init_array>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	4d0d      	ldr	r5, [pc, #52]	; (800779c <__libc_init_array+0x38>)
 8007768:	4c0d      	ldr	r4, [pc, #52]	; (80077a0 <__libc_init_array+0x3c>)
 800776a:	1b64      	subs	r4, r4, r5
 800776c:	10a4      	asrs	r4, r4, #2
 800776e:	2600      	movs	r6, #0
 8007770:	42a6      	cmp	r6, r4
 8007772:	d109      	bne.n	8007788 <__libc_init_array+0x24>
 8007774:	4d0b      	ldr	r5, [pc, #44]	; (80077a4 <__libc_init_array+0x40>)
 8007776:	4c0c      	ldr	r4, [pc, #48]	; (80077a8 <__libc_init_array+0x44>)
 8007778:	f000 f826 	bl	80077c8 <_init>
 800777c:	1b64      	subs	r4, r4, r5
 800777e:	10a4      	asrs	r4, r4, #2
 8007780:	2600      	movs	r6, #0
 8007782:	42a6      	cmp	r6, r4
 8007784:	d105      	bne.n	8007792 <__libc_init_array+0x2e>
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	f855 3b04 	ldr.w	r3, [r5], #4
 800778c:	4798      	blx	r3
 800778e:	3601      	adds	r6, #1
 8007790:	e7ee      	b.n	8007770 <__libc_init_array+0xc>
 8007792:	f855 3b04 	ldr.w	r3, [r5], #4
 8007796:	4798      	blx	r3
 8007798:	3601      	adds	r6, #1
 800779a:	e7f2      	b.n	8007782 <__libc_init_array+0x1e>
 800779c:	08007800 	.word	0x08007800
 80077a0:	08007800 	.word	0x08007800
 80077a4:	08007800 	.word	0x08007800
 80077a8:	08007804 	.word	0x08007804

080077ac <memcpy>:
 80077ac:	440a      	add	r2, r1
 80077ae:	4291      	cmp	r1, r2
 80077b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80077b4:	d100      	bne.n	80077b8 <memcpy+0xc>
 80077b6:	4770      	bx	lr
 80077b8:	b510      	push	{r4, lr}
 80077ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077c2:	4291      	cmp	r1, r2
 80077c4:	d1f9      	bne.n	80077ba <memcpy+0xe>
 80077c6:	bd10      	pop	{r4, pc}

080077c8 <_init>:
 80077c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ca:	bf00      	nop
 80077cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ce:	bc08      	pop	{r3}
 80077d0:	469e      	mov	lr, r3
 80077d2:	4770      	bx	lr

080077d4 <_fini>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	bf00      	nop
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr
